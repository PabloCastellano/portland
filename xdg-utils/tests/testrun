#!/bin/bash

## Usage:
## testrun dir1 dir2 ... 
## testrun t.foo t.bar ...
## Will find and run all files in dirs that begin with t.*
usage() {
cat << _ENDUSAGE_ 
Usage:
$0 [-iIcCh] [test|testgroup] [...]

Options:
     [-h]      Show this message and exit.

     [-I|-i]   Turn off/on interactive tests. 
               (overrides XDG_TEST_NO_INTERACTIVE)
  
     [-C|-c]   Turn off/on deletion of tempfiles.
               (overrides XDG_TEST_DONT_CLEANUP)


Arguments:

After options, all arguments correspond to tests to run. The default is to run all tests, which consist of all files matching 'xdg-*/t.*'.

Supplied testgroups can be a list of directories or a list of individual tests.


_ENDUSAGE_
exit 1
}
## Set up prerequisites
if [ -z "$XDG_TEST_DIR" ] ; then
	export XDG_TEST_DIR="$PWD"
	echo "WARNING: guessed XDG_TEST_DIR to be $XDG_TEST_DIR"
fi
if [ -z `which xdg-mime` ] && [ -d "$XDG_TEST_DIR/../scripts" ] ; then
	export PATH="$PATH:$XDG_TEST_DIR/../scripts"
	echo "WARNING: modified PATH to add '$XDG_TEST_DIR/../scripts'"
fi

## Read options
while getopts "iIcCh" opt; do
	case $opt in
		I ) export XDG_TEST_NO_INTERACTIVE="set" ;;
		i ) unset XDG_TEST_NO_INTERACTIVE ;;
		C ) export XDG_TEST_DONT_CLEANUP="set" ;;
		c ) unset XDG_TEST_DONT_CLEANUP ;;
		h ) usage ;;
		\? ) usage ;;
	esac
done
shift $(($OPTIND - 1))

## Read test groups
if [ $# -eq 0 ] ; then
	TEST_GROUPS=`ls -d $XDG_TEST_DIR/xdg-*`
else
	TEST_GROUPS="$@"
fi

TEST_FILES=`find $TEST_GROUPS -name 't.*' | sort`

declare -i PASS=0
declare -i FAILCOUNT=0
declare -i TOTAL=0
declare -i ATTEMPT=0
TEST_LOG="$XDG_TEST_DIR/xdg-test.log"

export USING_TEST_RUNNER="true"

for t in $TEST_FILES; do
	. "$t"
done

echo "[`date`] TEST RUN START: $*" >> "$TEST_LOG"
"$XDG_TEST_DIR/include/system_info" >>"$TEST_LOG"
#echo "TEST_LIST: $TEST_LIST"

for t in $TEST_LIST; do
	TOTAL=$((TOTAL + 1 ))
	ATTEMPT=$((ATTEMPT + 1 ))

	echo -n "$t: "
	
	test_setup

	# Run test - subshell is necessary to keep things contained.
	( "$t" ) >> "$TEST_LOG"
	CODE="$?"

	test_cleanup

	# Report result
	case "$CODE" in
		0 ) PASS=$((PASS + 1))
		    RESULT=PASS
		    ;;

		1 ) RESULT=FAIL
		    FAILCOUNT=$((FAILCOUNT +1))
		    ;;
		5 ) RESULT=UNTESTED
		    TOTAL=$((TOTAL - 1 )) ## HACK: we don't want to count tests that don't run.
		    ;;
		7 ) RESULT=NORESULT ;; 
		* ) RESULT="UNKNOWN($CODE)";;
	esac
	echo "$RESULT"
done
echo -n "[`date`] TEST RUN END: $* - " >> "$TEST_LOG"
echo "$FAILCOUNT tests failed, $PASS of $TOTAL tests passed. ($ATTEMPT attempted)" | tee -a "$TEST_LOG"
echo "See $TEST_LOG for details."

if [ $(( $TOTAL - $PASS )) -gt 0 ]; then
	EC=1
	echo "NOT OK!"
else
	EC=0
	echo "ok"
fi
exit "$EC"
