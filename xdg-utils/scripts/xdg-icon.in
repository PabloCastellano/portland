#!/bin/sh
#---------------------------------------------
#   xdg-icon
#
#   Utility script to install icons on a Linux desktop.
#   Works on most XDG compliant systems; does
#   not work everywhere.
#
#   Refer to the usage() function below for usage.
#
#   Copyright 2006, Kevin Krammer <kevin.krammer@gmx.at>
#   Copyright 2006, Jeremy White <jwhite@codeweavers.com>
#
#   LICENSE:
#
#---------------------------------------------

examples()
{
cat << _EXAMPLES
_EXAMPLES
}

usage()
{
cat << _USAGE
_USAGE
}

#@xdg-utils-common@

update_icon_database()
{
   for x in `echo $PATH | sed 's/:/ /g'` /opt/gnome/bin; do
      if [ -x $x/gtk-update-icon-cache ] ; then
         echo Running $x/gtk-update-icon-cache -f -t $1
         $x/gtk-update-icon-cache -f -t $1
         return
      fi
   done
}

[ x"$1" != x"" ] || exit_failure_syntax

mode=
action=
update=yes
size=
theme=hicolor
context=apps
icon_file=
icon_name=

case $1 in
  install)
    action=install
    ;;

  uninstall)
    action=uninstall
    ;;

  forceupdate)
    action=forceupdate
    ;;

  *)
    exit_failure_syntax "Invalid command: $1"
    ;;
esac

shift


while [ $# -gt 0 ] ; do
    parm=$1
    shift

    case $parm in
      --noupdate)
        update=no
        ;;

      --user)
        mode=user
        ;;

      --system)
        mode=system
        ;;

      --theme)
        if [ -z "$1" ] ; then
            exit_failure_syntax "Error:  You must specify a theme."
        fi
        theme=$1
        shift
        ;;

      --size)
        if [ -z "$1" ] ; then
            exit_failure_syntax "Error:  You must specify a size."
        fi
        size=$1
        shift
        ;;

      --context)
        if [ -z "$1" ] ; then
            exit_failure_syntax "Error:  You must specify a context."
        fi
        context=$1
        shift
        ;;

      --*)
        exit_failure_syntax "Invalid option '$parm'"
        ;;

      *)
        if [ -n "$icon_name" ] ; then
            exit_failure_syntax "Error:  Too many arguments: $parm"
        elif [ -n "$icon_file" ] ; then
            icon_name=$parm
        else
            if [ "$action" = "install" ] ; then
                if [ ! -f "$parm" ] ; then
                    exit_failure_file_missing "Error:  You must specify an existing file to install."
                fi
            fi
            icon_file=$parm
        fi
        ;;
    esac
done

if [ -z "$action" ] ; then
    exit_failure_syntax
fi

if [ -z "$mode" ] ; then
    exit_failure_syntax "Error:  You must specify either --user or --system"
fi

xdg_dir_name=icons/$theme

xdg_user_dir=$XDG_DATA_HOME
[ -n "$xdg_user_dir" ] || xdg_user_dir=$HOME/.local/share
xdg_user_dir=$xdg_user_dir/$xdg_dir_name

xdg_system_dirs=$XDG_DATA_DIRS
[ -n "$xdg_system_dirs" ] || xdg_system_dirs=/usr/local/share/:/usr/share/
for x in `echo $xdg_system_dirs | sed 's/:/ /g'` ; do
   if [ -w $x/$xdg_dir_name ] ; then
      xdg_global_dir=$x/$xdg_dir_name
      break
   fi
done
[ -w $xdg_global_dir ] || xdg_global_dir=

if [ x"$mode" = x"user" ] ; then
    xdg_base_dir=$xdg_user_dir
else
    xdg_base_dir=$xdg_global_dir
    if [ -z "$xdg_base_dir" ] ; then
        [ `whoami` = "root" ] || rootmsg="Try as root or use --user."
        exit_failure_operation_impossible "No writable system icon directory found. $rootmsg"
    fi
fi

if [ x"$action" = x"forceupdate" ] ; then
    update_icon_database $xdg_base_dir
    exit_success
fi

if [ -z "$icon_file" ] ; then
    exit_failure_syntax
fi

filetype=
xdg_size_name=
case $icon_file in
  *.xpm)
     filetype=bitmap
     if [ -z "$size" ] ; then
         exit_failure_syntax "Error:  You must specify the icon size with --size"
     fi
     xdg_size_name=${size}x${size}
     ;;
  *.png)
     filetype=bitmap
     if [ -z "$size" ] ; then
         exit_failure_syntax "Error:  You must specify the icon size with --size"
     fi
     xdg_size_name=${size}x${size}
     ;;
  *.svg)
     fileype=svg
     if [ -n "$size" ] ; then
         exit_failure_syntax "Error:  You may not specify an icon size for .svg icons"
     fi
     xdg_size_name=scalable
     ;;
  *)
     exit_failure_syntax "Error: File to $action must be a *.png, *.xpm or *.svg file"
     ;;
esac

if [ -n "$icon_name" ] ; then
    case $icon_name in
      *.xpm)
         ;;
      *.png)
         ;;
      *.svg)
         ;;
      *)
         exit_failure_syntax "Error: icon name must end with .png, .xpm or .svg"
         ;;
    esac
fi

#TODO: Legacy support
#KDE 3.4 (RH FC4) doesn't look for icons in xdg_user_dir
#we must install to $kde_user_dir as well
kde_dir=
kde_user_dir=$HOME/.kde/share/icons/$theme
kde_global_dir=/usr/share/applnk
[ -w $kde_global_dir ] || kde_global_dir=

#TODO: Legacy support
gnome_user_dir=$HOME/.gnome/apps
gnome_global_dir=/usr/share/gnome/apps
[ -w $gnome_global_dir ] || gnome_global_dir=


if [ x"$mode" = x"user" ] ; then
    xdg_dir=$xdg_base_dir/$xdg_size_name/$context
    kde_dir=$kde_user_dir/$xdg_size_name/$context
    my_umask=077
else
    xdg_dir=$xdg_base_dir/$xdg_size_name/$context
    my_umask=022
fi

echo "[xdg|$xdg_user_dir|$xdg_global_dir]"
# echo "[kde|$kde_user_dir|$kde_global_dir]"
# echo "[gnome|$gnome_user_dir|$gnome_global_dir]"
echo "[using|$xdg_dir|$kde_dir|$gnome_dir]"

[ -n "$icon_name" ] || icon_name=`basename $icon_file`

case $action in
    install)
        save_umask=`umask`
        umask $my_umask

        mkdir -p $xdg_dir
        cp $icon_file $xdg_dir/$icon_name
        if [ -n "$kde_dir" ] ; then
            mkdir -p $kde_dir
            ln -s $xdg_dir/$icon_name $kde_dir/$icon_name
        fi

        umask $save_umask
        ;;

    uninstall)
        rm -f $xdg_dir/$icon_name
        if [ -n "$kde_dir" ] ; then
            rm -f $kde_dir/$icon_name
        fi

        ;;
esac

if [ x"$update" = x"yes" ] ; then
    update_icon_database $xdg_base_dir
fi

exit_success
