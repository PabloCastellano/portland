#!/bin/sh
#---------------------------------------------
#   xdg-mime
#
#   Utility script to manipulate MIME related information
#   on XDG compliant systems.
#
#   Refer to the usage() function below for usage.
#
#   Copyright 2006, Kevin Krammer <kevin.krammer@gmx.at>
#   Copyright 2006, Jeremy White <jwhite@codeweavers.com>
#
#   LICENSE:
#
#   Permission is hereby granted, free of charge, to any person obtaining a
#   copy of this software and associated documentation files (the "Software"),
#   to deal in the Software without restriction, including without limitation
#   the rights to use, copy, modify, merge, publish, distribute, sublicense,
#   and/or sell copies of the Software, and to permit persons to whom the
#   Software is furnished to do so, subject to the following conditions:
#
#   The above copyright notice and this permission notice shall be included
#   in all copies or substantial portions of the Software.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
#   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
#   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
#   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
#   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
#   OTHER DEALINGS IN THE SOFTWARE.
#
#---------------------------------------------

manualpage()
{
cat << _MANUALPAGE
Name

   xdg-mime -- command line tool for querying information about file type
   handling and adding descriptions for new file types

Synopsis

   xdg-mime query { filetype | default } FILE

   xdg-mime install { --user | --system } mimetypes-file

   xdg-mime uninstall { --user | --system } mimetypes-file

   xdg-mime { --help | --manual | --version }

Description

   The xdg-mime program can be used to query information about file types and
   to add descriptions for new file types.

Commands

   query

           Returns information related to the file type of FILE.

           The query option is for use inside a desktop session only. It is
           not recommended to use xdg-mime query as root.

           The following queries are supported:

           filetype: Returns the file type of FILE in the form of a MIME
           type.

           default: Returns the default application that the desktop
           environment uses for opening FILE. The default applications is
           identified by its *.desktop file.

   install
           Adds the file type descriptions provided in mimetypes-file to the
           desktop environment. mimetypes-file must be a XML file that
           follows the freedesktop.org Shared MIME-info Database
           specification and that has a mime-info element as its document
           root. For each new file type one or more icons with name
           major-minor must be installed with the xdg-icon-resource command
           in the mimetypes context. For example the
           application/vnd.oasis.opendocument.text filetype requires an icon
           by the name of application-vnd.oasis.opendocument.text to be
           installed.

   uninstall
           Removes the file type descriptions provided in mimetypes-file and
           previously added with xdg-mime install from the desktop
           environment. mimetypes-file must be a XML file that follows the
           freedesktop.org Shared MIME-info Database specification and that
           has a mime-info element as its document root.

Options

   --user
           Adds or removes file type descriptions for the current user only.

   --system
           Adds or removes file type descriptions for all users on the
           system. Usually only root is allowed to do this.

   --help
           Show command synopsis.

   --manual
           Show this manualpage.

   --version
           Show the xdg-utils version information.

Exit Codes

   An exit code of 0 indicates success while a non-zero exit code indicates
   failure. The following failure codes can be returned:

   1
           Error in command line syntax.

   2
           One of the files passed on the command line did not exist.

   3
           A required tool could not be found.

   4
           The action failed.

See Also

   xdg-icon-resource(1), xdg-desktop-menu(1)

Examples

 xdg-mime query filetype /tmp/foobar.png

   Prints the MIME type of the file /tmp/foobar.png

 xdg-mime query default /tmp/foobar.png

   Prints the name of the .desktop file of the application which is
   registered to open files of the MIME type the file /tmp/foobar.png has

 xdg-mime install --system diff.xml

   Adds a file type description for "diff"-files for all users on the system.
   The file type description could look as folows.

 diff.xml:

 <?xml version="1.0"?>
 <mime-info xmlns='http://www.freedesktop.org/standards/shared-mime-info'>
   <mime-type type="text/x-diff">
     <comment>Differences between files</comment>
     <glob pattern="*.diff"/>
     <glob pattern="*.patch"/>
   </mime-type>
 </mime-info>

   An icon for this new file type must alsobe installed, for example with:

 xdg-icon-resource install --system --context mimetypes --size 64 text-x-diff.png
_MANUALPAGE
}

usage()
{
cat << _USAGE
   xdg-mime -- command line tool for querying information about file type
   handling and adding descriptions for new file types

Synopsis

   xdg-mime query { filetype | default } FILE

   xdg-mime install { --user | --system } mimetypes-file

   xdg-mime uninstall { --user | --system } mimetypes-file

   xdg-mime { --help | --manual | --version }

_USAGE
}

#@xdg-utils-common@

#----------------------------------------------------------------------------
#   Common utility functions included in all XDG wrapper scripts
#----------------------------------------------------------------------------

#-------------------------------------------------------------
# Exit script on successfully completing the desired operation

exit_success()
{
    if [ $# -gt 0 ]; then
        echo "$@"
        echo
    fi

    exit 0
}


#-----------------------------------------
# Exit script on malformed arguments, not enough arguments
# or missing required option.
# prints usage information

exit_failure_syntax()
{
    if [ $# -gt 0 ]; then
        echo "xdg-mime: $@" >&2
        echo "Try 'xdg-mime --help' for more information." >&2
    else
        usage
        echo "Use 'man xdg-mime' or 'xdg-mime --manual' for additional info." 
    fi

    exit 1
}

#-------------------------------------------------------------
# Exit script on missing file specified on command line

exit_failure_file_missing()
{
    if [ $# -gt 0 ]; then
        echo "xdg-mime: $@" >&2
    fi

    exit 2
}

#-------------------------------------------------------------
# Exit script on failure to locate necessary tool applications

exit_failure_operation_impossible()
{
    if [ $# -gt 0 ]; then
        echo "xdg-mime: $@" >&2
    fi

    exit 3
}

#-------------------------------------------------------------
# Exit script on failure returned by a tool application

exit_failure_operation_failed()
{
    if [ $# -gt 0 ]; then
        echo "xdg-mime: $@" >&2
    fi

    exit 4
}


#----------------------------------------
# Checks for shared commands, e.g. --help

check_common_commands()
{
    while [ $# -gt 0 ] ; do
        parm=$1
        shift

        case $parm in
            --help)
            usage
            echo "Use 'man xdg-mime' or 'xdg-mime --manual' for additional info." 
            exit_success
            ;;

            --manual)
            manualpage
            exit_success
            ;;

            --version)
            echo "xdg-mime 1.0beta1"
            exit_success
            ;;
        esac
    done
}

check_common_commands "$@"

#--------------------------------------
# Checks for known desktop environments
# set variable DE to the desktop environments name, lowercase

detectDE()
{
    if [ x"$KDE_FULL_SESSION" = x"true" ]; then DE=kde;
    elif [ x"$GNOME_DESKTOP_SESSION_ID" != x"" ]; then DE=gnome;
    elif xprop -root _DT_SAVE_MODE | grep ' = \"xfce4\"$' >/dev/null 2>&1; then DE=xfce;
    fi
}

#----------------------------------------------------------------------------



update_mime_database()
{
   IFS_save=$IFS
   IFS=":"
   for x in $PATH:/opt/gnome/bin; do
      if [ -x $x/update-mime-database ] ; then
         echo Running $x/update-mime-database $1
         $x/update-mime-database $1
         return
      fi
   done
   IFS=$IFS_save
}

info_kde()
{
    kfile "$1" 2> /dev/null | head -n 1 | cut -d "(" -f 2 | cut -d ")" -f 1

    exit_success
}

info_gnome()
{
    gnomevfs-info "$1" 2> /dev/null | grep MIME | cut -d ":" -f 2 | sed s/"^ "//

    exit_success
}

info_generic()
{
    /usr/bin/file -i "$1" 2> /dev/null | cut -d ":" -f 2 | sed s/"^ "//

    exit_success
}

defapp_kde()
{
    MIME=`kfile "$1" 2> /dev/null | head -n 1 | cut -d "(" -f 2 | cut -d ")" -f 1`

    if [ x"$MIME" != x"" ]; then
        ktradertest "$MIME" Application 2>/dev/null | grep DesktopEntryPath \
            | head -n 1 | cut -d ':' -f 2 | cut -d \' -f 2 | xargs basename
        exit_success
    else
        exit_failure_operation_failed
    fi
}

defapp_gnome()
{
    gnomevfs-info "$1" 2> /dev/null | grep "Default app" | cut -d ":" -f 2 \
        | cut -d " " -f 2

    exit_success
}


install_xsl_listmime()
{
# Dump script to file, can't pipe into xsltproc directly
xsl_file=`mktemp` || return
cat > $xsl_file << _XSL
<?xml version="1.0" encoding="ISO-8859-1"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
xmlns:mime="http://www.freedesktop.org/standards/shared-mime-info">
<xsl:output method="text"
            encoding="UTF-8"
            indent="no"/>
<xsl:template match="/">
      <xsl:for-each select='mime:mime-info/mime:mime-type'>
        <xsl:value-of select="@type"/><xsl:text>&#10;</xsl:text>
      </xsl:for-each>
</xsl:template>
</xsl:stylesheet>
_XSL
}

install_xsl_shared2mimelnk()
{
# Dump script to file, can't pipe into xsltproc directly
xsl_file=`mktemp` || return
cat > $xsl_file << _XSL
<?xml version="1.0" encoding="ISO-8859-1"?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
xmlns:mime="http://www.freedesktop.org/standards/shared-mime-info">
<xsl:output method="text"
            encoding="UTF-8"
            indent="no"/>
<xsl:template match="/">
      <xsl:for-each select='mime:mime-info/mime:mime-type[@type=\$type]'>
        <xsl:text>[Desktop Entry]&#10;</xsl:text>
        <xsl:text># Installed by xdg-mime from </xsl:text><xsl:value-of select="\$source"/><xsl:text>&#10;</xsl:text>
        <xsl:text>Type=MimeType&#10;</xsl:text>
        <xsl:text>MimeType=</xsl:text><xsl:value-of select="@type"/><xsl:text>&#10;</xsl:text>
        <xsl:text>Icon=</xsl:text><xsl:value-of select="translate(@type,'/','-')"/><xsl:text>&#10;</xsl:text>
        <xsl:if test="mime:sub-class-of">
           <xsl:text>X-KDE-IsAlso=</xsl:text><xsl:value-of select="mime:sub-class-of/@type"/><xsl:text>&#10;</xsl:text>
        </xsl:if>
        <xsl:if test="mime:glob">
          <xsl:text>Patterns=</xsl:text>
          <xsl:for-each select='mime:glob[@pattern]'>
            <xsl:value-of select="@pattern"/><xsl:text>;</xsl:text>
          </xsl:for-each>
          <xsl:text>&#10;</xsl:text>
        </xsl:if>
        <xsl:text>Comment=</xsl:text><xsl:value-of select="mime:comment[not(@xml:lang)]"/><xsl:text>&#10;</xsl:text>
        <xsl:for-each select='mime:comment[@xml:lang]'>
          <xsl:sort select='@xml:lang'/>
          <xsl:text>Comment[</xsl:text><xsl:value-of select="@xml:lang"/><xsl:text>]=</xsl:text><xsl:value-of select="."/><xsl:text>&#10;</xsl:text>
        </xsl:for-each>
     </xsl:for-each>
</xsl:template>
</xsl:stylesheet>
_XSL
}

uninstall_xsl()
{
  rm -f $xsl_file
  xsl_file=
}


[ x"$1" != x"" ] || exit_failure_syntax

mode=
action=
filename=

case $1 in
  install)
    action=install
    ;;

  uninstall)
    action=uninstall
    ;;

  query)
    shift

    if [ -z "$1" ] ; then 
        exit_failure_syntax "query type argument missing"
    fi
    
    case $1 in
      filetype)
        action=info
        ;;

      default)
        action=defapp
        ;;

      *)
      exit_failure_syntax "unknown query type '$1'"
      ;;
    esac
    ;;

  *)
  exit_failure_syntax "unknown command '$1'"
  ;;
esac

shift



while [ $# -gt 0 ] ; do
    parm=$1
    shift

    case $parm in
      --user)
        mode=user
        ;;

      --system)
        mode=system
        ;;

      -*)
        exit_failure_syntax "unexpected option '$parm'"
        ;;

      *)
        if [ -n "$filename" ] ; then
            exit_failure_syntax "unexpected argument '$parm'"
        fi
        if [ ! -f "$parm" ] ; then
            exit_failure_file_missing "file '$parm' does not exist"
        fi
        filename=$parm
        ;;
    esac
done

# Shouldn't happen
if [ -z "$action" ] ; then
    exit_failure_syntax "command argument missing"
fi

if [ "$action" = "info" ]; then
    if [ -n "$mode" ] ; then
        exit_failure_syntax "unexpected option '--$mode'"
    fi
    if [ -z "$filename" ] ; then
        exit_failure_syntax "FILE argument missing"
    fi

    detectDE

    if [ x"$DE" = x"" ]; then
        if [ -x /usr/bin/file ]; then
            DE=generic
        fi
    fi

    case "$DE" in
        kde)
        info_kde "$filename"
        ;;

        gnome)
        info_gnome "$filename"
        ;;

        generic)
        info_generic "$filename"
        ;;
    esac
    exit_failure_operation_impossible "no method available for quering MIME type of '$filename'"
fi

if [ "$action" = "defapp" ]; then
    if [ -n "$mode" ] ; then
        exit_failure_syntax "unexpected option '--$mode'"
    fi
    if [ -z "$filename" ] ; then
        exit_failure_syntax "FILE argument missing"
    fi

    detectDE

    case "$DE" in
        kde)
        defapp_kde "$filename"
        ;;

        gnome)
        defapp_gnome "$filename"
        ;;
    esac
    exit_failure_operation_impossible "no method available for quering default application for file '$filename'"
fi

if [ -z "$mode" ] ; then
    exit_failure_syntax "expected --user or --system option"
fi
if [ -z "$filename" ] ; then
    exit_failure_syntax "mimetypes-file argument missing"
fi

xdg_base_dir=
xdg_dir_name=mime/packages/

xdg_user_dir=$XDG_DATA_HOME
[ -n "$xdg_user_dir" ] || xdg_user_dir=$HOME/.local/share
[ x"$mode" = x"user" ] && xdg_base_dir=$xdg_user_dir/mime
xdg_user_dir=$xdg_user_dir/$xdg_dir_name

xdg_system_dirs=$XDG_DATA_DIRS
[ -n "$xdg_system_dirs" ] || xdg_system_dirs=/usr/local/share/:/usr/share/
IFS_save=$IFS
IFS=":"
for x in $xdg_system_dirs ; do
    if [ -w $x/$xdg_dir_name ] ; then
        [ x"$mode" = x"system" ] && xdg_base_dir=$x/mime
        xdg_global_dir=$x/$xdg_dir_name
        break
    fi
done
IFS=$IFS_save
[ -w $xdg_global_dir ] || xdg_global_dir=

# Find KDE3 mimelnk directory
kde_user_dir=$HOME/.kde/share/mimelnk
kde_global_dir=
kde_global_dirs=`kde-config --path mime`
[ -n $kde_global_dirs ] || kde_global_dirs=/opt/kde3/share/mimelnk:/opt/kde/share/mimelnk:/usr/share/mimelnk
IFS_save=$IFS
IFS=":"
first=
for x in $kde_global_dirs ; do
    if [ -z "$first" ] ; then
        first=false
        [ x"$mode" = x"user" ] && kde_user_dir=$x
    elif [ -w $x ] ; then
        [ x"$mode" = x"system" ] && kde_global_dir=$x
    fi
done
IFS=$IFS_save

# TODO: Gnome legacy support
gnome_user_dir=$HOME/.gnome/apps
gnome_global_dir=/usr/share/gnome/apps
[ -w $gnome_global_dir ] || gnome_global_dir=

if [ x"$mode" = x"user" ] ; then
    xdg_dir=$xdg_user_dir
    kde_dir=$kde_user_dir
    gnome_dir=$gnome_user_dir
    my_umask=077
else
    xdg_dir=$xdg_global_dir
    kde_dir=$kde_global_dir
    gnome_dir=$gnome_global_dir
    my_umask=022
    if [ -z "${xdg_dir}${kde_dir}${gnome_dir}" ] ; then
        [ `whoami` = "root" ] || rootmsg="Try as root or use --user."
        exit_failure_operation_impossible "No writable system mimetype directory found. $rootmsg"
    fi
fi

# echo "[xdg|$xdg_user_dir|$xdg_global_dir]"
# echo "[kde|$kde_user_dir|$kde_global_dir]"
# echo "[gnome|$gnome_user_dir|$gnome_global_dir]"
# echo "[using|$xdg_dir|$kde_dir|$gnome_dir]"

basefile=`basename $filename`
#[ -z $vendor ] || basefile=$vendor-$basefile

mimetypes=
if [ -n "$kde_dir" ] ; then
    echo KDE3 mimelnk directory found
    install_xsl_listmime
    mimetypes=`xsltproc $xsl_file $filename`
    uninstall_xsl
fi  

case $action in
    install)
        save_umask=`umask`
        umask $my_umask

        for x in $xdg_dir ; do
            mkdir -p $x
            cp $filename $x/$basefile
        done

        if [ -n "$mimetypes" ] ; then
            install_xsl_shared2mimelnk
        
            IFS_save=$IFS
            IFS='
'
            for x in $mimetypes ; do 
                xsltproc --stringparam type $x --stringparam source $basefile $xsl_file $filename > $kde_dir/$x.desktop
            done
            IFS=$IFS_save

            uninstall_xsl
        fi

        umask $save_umask
        ;;

    uninstall)
        for x in $xdg_dir ; do
            rm -f $x/$basefile
        done

        IFS_save=$IFS
        IFS='
'
        for x in $mimetypes ; do 
            if grep '^# Installed by xdg-mime' $kde_dir/$x.desktop &>/dev/null ; then
                rm -f $kde_dir/$x.desktop
            fi
        done
        IFS=$IFS_save

        ;;
esac

update_mime_database $xdg_base_dir

exit_success

