#!/bin/sh
#---------------------------------------------
#   xdg-mime
#
#   Utility script to manipulate MIME related information
#   on XDG compliant systems.
#
#   Refer to the usage() function below for usage.
#
#   Copyright 2006, Kevin Krammer <kevin.krammer@gmx.at>
#   Copyright 2006, Jeremy White <jwhite@codeweavers.com>
#
#   LICENSE:
#
#---------------------------------------------

examples()
{
cat << _EXAMPLES
_EXAMPLES
}

usage()
{
cat << _USAGE
_USAGE
}

#@xdg-utils-common@

update_mime_database()
{
   for x in `echo $PATH | sed 's/:/ /g'` /opt/gnome/bin; do
      if [ -x $x/update-mime-database ] ; then
         echo Running $x/update-mime-database $1
         $x/update-mime-database $1
         return
      fi
   done
}

info_kde()
{
    kfile "$1" 2> /dev/null | head -n 1 | cut -d "(" -f 2 | cut -d ")" -f 1

    exit_success
}

info_gnome()
{
    gnomevfs-info "$1" 2> /dev/null | grep MIME | cut -d ":" -f 2 | sed s/"^ "//

    exit_success
}

info_generic()
{
    /usr/bin/file -i "$1" 2> /dev/null | cut -d ":" -f 2 | sed s/"^ "//

    exit_success
}

defapp_kde()
{
    MIME=`kfile "$1" 2> /dev/null | head -n 1 | cut -d "(" -f 2 | cut -d ")" -f 1`

    if [ x"$MIME" != x"" ]; then
        ktradertest "$MIME" Application 2>/dev/null | grep DesktopEntryPath \
            | head -n 1 | cut -d ':' -f 2 | cut -d \' -f 2 | xargs basename
        exit_success
    else
        exit_failure_operation_failed
    fi
}

defapp_gnome()
{
    gnomevfs-info "$1" 2> /dev/null | grep "Default app" | cut -d ":" -f 2 \
        | cut -d " " -f 2

    exit_success
}

[ x"$1" != x"" ] || exit_failure_arg_count

mode=
action=
mimetypes_file=
info_file=
while [ $# -gt 0 ] ; do
    parm=$1
    shift

    case $parm in
      --install)
        if [ -n "$action" ] ; then
            exit_failure_arg_count "Error:  Too many options:" $parm $1
        fi
        if [ ! -f "$1" ] ; then
            exit_failure_arg_count "Error:  You must specify an existing file to install."
        fi

        action=install
        mimetypes_file=$1
        shift
        ;;

      --uninstall)
        if [ -n "$action" ] ; then
            exit_failure_arg_count "Error:  Too many options:" $parm $1
        fi
        if [ -z "$1" ] ; then
            exit_failure_arg_count "Error:  You must specify a file to uninstall."
        fi
        action=uninstall
        mimetypes_file=$1
        shift
        ;;

      --info)
        if [ -n "$action" ] ; then
            exit_failure_arg_count "Error:  Too many options:" $parm $1
        fi
        if [ -z "$1" ] ; then
            exit_failure_arg_count "Error:  You must specify a file with --info."
        fi
        action=info
        info_file=$1
        shift
        ;;

      --defapp)
        if [ -n "$action" ] ; then
            exit_failure_arg_count "Error:  Too many options:" $parm $1
        fi
        if [ -z "$1" ] ; then
            exit_failure_arg_count "Error:  You must specify a file with --defapp."
        fi
        action=defapp
        info_file=$1
        shift
        ;;

      --user)
        mode=user
        ;;

      --system)
        mode=system
        ;;

      *)
        exit_failure_arg_malformed "$parm:  Invalid parameter/option"
        ;;
    esac
done


if [ -z "$action" ] ; then
    exit_failure_arg_count
fi


if [ "$action" = "info" ]; then
    if [ -n "$mode" ] ; then
        exit_failure_arg_count "Error:  Too many options: --$mode"
    fi

    if [ x"$DE" = x"" ]; then
        if [ -x /usr/bin/file ]; then
            DE=generic
        fi
    fi

    case "$DE" in
        kde)
        info_kde "$info_file"
        ;;

        gnome)
        info_gnome "$info_file"
        ;;

        generic)
        info_generic "$info_file"
        ;;
    esac
    exit_failure_operation_impossible "Sorry, no method available for quering MIME type of" "$info_file"
fi

if [ "$action" = "defapp" ]; then
    if [ -n "$mode" ] ; then
        exit_failure_arg_count "Error:  Too many options: --$mode"
    fi

    case "$DE" in
        kde)
        defapp_kde "$info_file"
        ;;

        gnome)
        defapp_gnome "$info_file"
        ;;
    esac
    exit_failure_operation_impossible "Sorry, no method available for quering default application for file" "$info_file"
fi

if [ -z "$mode" ] ; then
    exit_failure_arg_malformed "Error:  You must specify either --user or --system"
fi

xdg_base_dir=
xdg_dir_name=mime/packages/

xdg_user_dir=$XDG_DATA_HOME
[ -n "$xdg_user_dir" ] || xdg_user_dir=$HOME/.local/share
[ x"$mode" = x"user" ] && xdg_base_dir=$xdg_user_dir/mime
xdg_user_dir=$xdg_user_dir/$xdg_dir_name

xdg_system_dirs=$XDG_DATA_DIRS
[ -n "$xdg_system_dirs" ] || xdg_system_dirs=/usr/local/share/:/usr/share/
for x in `echo $xdg_system_dirs | sed 's/:/ /g'` ; do
    if [ -w $x/$xdg_dir_name ] ; then
        [ x"$mode" = x"system" ] && xdg_base_dir=$x/mime
        xdg_global_dir=$x/$xdg_dir_name
        break
    fi
done
[ -w $xdg_global_dir ] || xdg_global_dir=

# TODO: KDE legacy support
kde_user_dir=$HOME/.kde/share/mimelnk
kde_global_dir=/usr/share/mimelnk
[ -w $kde_global_dir ] || kde_global_dir=

# TODO: Gnome legacy support
gnome_user_dir=$HOME/.gnome/apps
gnome_global_dir=/usr/share/gnome/apps
[ -w $gnome_global_dir ] || gnome_global_dir=

if [ x"$mode" = x"user" ] ; then
    xdg_dir=$xdg_user_dir
    kde_dir=$kde_user_dir
    gnome_dir=$gnome_user_dir
    my_umask=077
else
    xdg_dir=$xdg_global_dir
    kde_dir=$kde_global_dir
    gnome_dir=$gnome_global_dir
    my_umask=022
    if [ -n "$xdg_dir $kde_dir $gnome_dir" ] ; then
        [ `whoami` = "root" ] || rootmsg="Try as root or use --user."
        exit_failure_operation_impossible "No writable system mimetype directory found. $rootmsg"
    fi
fi

# echo "[xdg|$xdg_user_dir|$xdg_global_dir]"
# echo "[kde|$kde_user_dir|$kde_global_dir]"
# echo "[gnome|$gnome_user_dir|$gnome_global_dir]"
# echo "[using|$xdg_dir|$kde_dir|$gnome_dir]"

basefile=`basename $mimetypes_file`
#[ -z $vendor ] || basefile=$vendor-$basefile

case $action in
    install)
        save_umask=`umask`
        umask $my_umask

        for x in $xdg_dir ; do
            mkdir -p $x
            cp $mimetypes_file $x/$basefile
        done

        umask $save_umask
        ;;

    uninstall)
        for x in $xdg_dir ; do
            rm -f $x/$basefile
        done

        ;;
esac

update_mime_database $xdg_base_dir

exit_success

