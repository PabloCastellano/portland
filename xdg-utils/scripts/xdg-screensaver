#!/bin/sh
#---------------------------------------------
#   xdg-screensaver
#
#   Utility script to enable/disable screensaver.
#
#   Refer to the usage() function below for usage.
#
#   Copyright 2006, Bryce Harrington <bryce@osdl.org>
#
#   LICENSE:
#
#   Permission is hereby granted, free of charge, to any person obtaining a
#   copy of this software and associated documentation files (the "Software"),
#   to deal in the Software without restriction, including without limitation
#   the rights to use, copy, modify, merge, publish, distribute, sublicense,
#   and/or sell copies of the Software, and to permit persons to whom the
#   Software is furnished to do so, subject to the following conditions:
#
#   The above copyright notice and this permission notice shall be included
#   in all copies or substantial portions of the Software.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
#   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
#   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
#   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
#   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
#   OTHER DEALINGS IN THE SOFTWARE.
#
#---------------------------------------------

# Default value for delay when suspending screensaver
DELAY=60m

examples()
{
cat << _EXAMPLES
Examples

 xdg-screensaver suspend 3h

   Causes the screensaver to not turn on due to inactivity, for 3 hours,
   after which time it will return to automatic activation.

Bugss

   There is no provision for cancelling a suspend operation. If a second
   suspend is started before the first one is completed, then the screensaver
   will be restored to its original state before the second suspend is able
   to complete.

   For example, if a presenter completes her presentation, and a second
   presenter starts before the delay is over, then the screensaver could come
   on during the second presentation.

   True suspend functionality will require cooperation from the X server. The
   Xorg group has implemented an extension that allows an application to
   disable the screensaver while it is connected, which will re-enable the
   screensaver. xdg-screensaver should be updated to take advantage of this
   functionality when it is available.
_EXAMPLES
}

usage()
{
cat << _USAGE
   xdg-screensaver -- Enable, disable, and suspend the screensaver

Synopsis

   xdg-screensaver { suspend delay | restore | enable | disable | activate |
   reset | status }

   xdg-screensaver { --help | --version }

_USAGE
}

#@xdg-utils-common@

#----------------------------------------------------------------------------
#   Common utility functions included in all XDG wrapper scripts
#----------------------------------------------------------------------------

#-------------------------------------------------------------
# Exit script on successfully completing the desired operation

exit_success()
{
    if [ $# -gt 0 ]; then
        echo "$@"
        echo
    fi

    exit 0
}


#-----------------------------------------
# Exit script on wrong number of arguments
# prints usage information

exit_failure_arg_count()
{
    if [ $# -gt 0 ]; then
        echo "$@"
        echo
    fi

    usage

    exit 1
}


#-----------------------------------
# Exit script on malformed arguments
# prints usage information

exit_failure_arg_malformed()
{
    if [ $# -gt 0 ]; then
        echo "$@"
        echo
    fi

    usage

    exit 2
}

#-------------------------------------------------------------
# Exit script on failure to locate necessary tool applications

exit_failure_operation_impossible()
{
    if [ $# -gt 0 ]; then
        echo "$@"
        echo
    fi

    exit 3
}

#-------------------------------------------------------------
# Exit script on failure returned by a tool application

exit_failure_operation_failed()
{
    if [ $# -gt 0 ]; then
        echo "$@"
        echo
    fi

    exit 4
}

#----------------------------------------
# Checks for shared commands, e.g. --help

check_common_commands()
{
    while [ $# -gt 0 ] ; do
        parm=$1
        shift

        case $parm in
            --help)
            usage
            examples
            exit_success
            ;;

            --version)
            echo "xdg-utils technical-preview"
            exit_success
            ;;
        esac
    done
}

check_common_commands "$@"

#--------------------------------------
# Checks for known desktop environments
# set variable DE to the desktop environments name, lowercase

detectDE()
{
    if [ x"$KDE_FULL_SESSION" = x"true" ]; then DE=kde;
    elif [ x"$GNOME_DESKTOP_SESSION_ID" != x"" ]; then DE=gnome;
    elif xprop -root _DT_SAVE_MODE | grep ' = \"xfce4\"$' >/dev/null 2>&1; then DE=xfce;
    fi
}

detectDE

#----------------------------------------------------------------------------



screensaver_xset()
{
    TIMEOUT=`xset q | /bin/grep -A 2 ^Screen | /bin/grep timeout | awk '{print $2}'` 
    DPMS=`xset q | /bin/grep 'DPMS is' | awk '{print $3}'` 

    if [ "$DPMS" = "Enabled" ]; then
        DPMS="+dpms"
    else
        DPMS="-dpms"
    fi

    case "$1" in
        suspend)
        delay=${2:-$DELAY}
        xset s off -dpms && sleep $delay && xset s default &
        ;;

        restore)
        # Restores screensaver to its default settings
        xset s default "$DPMS"
        ;;

        enable)
        # Allows the screensaver to start automatically
        xset s on "$DPMS"
        ;;

        disable)
        # Prevents screensaver from starting automatically
        xset s off -dpms
        ;;

        activate)
        # Turns the screensaver on right now
        xset s activate
        ;;

        reset)
        # Turns the screensaver off right now
        xset s reset
        ;;

        status)
        if [ ${TIMEOUT:0} -eq 0 ]; then
            echo "Enabled:  false"
        else
            echo "Enabled:  true"
        fi
        ;;
    esac

    if [ $? -eq 0 ]; then
        exit_success
    else
        exit_failure_operation_failed
    fi
}

screensaver_kde()
{
    case "$1" in
        suspend) 
        delay=${2:-$DELAY}
        dcop kdesktop KScreensaverIface enable false > /dev/null && \
            sleep $delay && \
            dcop kdesktop KScreensaverIface configure > /dev/null &
        ;;

        restore)
        dcop kdesktop KScreensaverIface configure
        ;;
        
        enable)
        dcop kdesktop KScreensaverIface enable false > /dev/null
        ;;
        
        disable)
        dcop kdesktop KScreensaverIface enable true > /dev/null
        ;;

        activate)
        # Turns the screensaver on right now
        dcop kdesktop KScreensaverIface save
        ;;

        reset)
        # Turns the screensaver off right now
        dcop kdesktop KScreensaverIface quit
        ;;

        status)
        status=`dcop kdesktop KScreensaverIface isEnabled`
        if [ status = 'true' ]; then
            echo "enabled"
        elif [ status = 'false' ]; then
            echo "disabled"
        else
            echo "ERROR:  kdesktop KScreensaverIface isEnabled returned '$status'"
            exit_failure_operation_failed
        fi
        ;;

        *)
        echo "ERROR:  Unknown command '$1"
        exit_failure_operation_failed
        ;;
    esac

    if [ $? -eq 0 ]; then
        exit_success
    else
        exit_failure_operation_failed
    fi
}

screensaver_gnome()
{
# TODO

    if [ $? -eq 0 ]; then
        exit_success
    else
        exit_failure_operation_failed
    fi
}

[ x"$1" != x"" ] || exit_failure_arg_count


# Always set the Xorg screensaver first
screensaver_xset "$1" "$2"

# Just in case, also do the desktop environment's screensaver
case "$DE" in
    kde)
    screensaver_kde  "$1" "$2"
    ;;

    gnome)
    screensaver_gnome "$1" "$2"
    ;;

esac
