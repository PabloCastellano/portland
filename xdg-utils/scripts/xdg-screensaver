#!/bin/sh
#---------------------------------------------
#   xdg-screensaver
#
#   Utility script to control screensaver.
#
#   Refer to the usage() function below for usage.
#
#   Copyright 2006, Bryce Harrington <bryce@osdl.org>
#
#   LICENSE:
#
#   Permission is hereby granted, free of charge, to any person obtaining a
#   copy of this software and associated documentation files (the "Software"),
#   to deal in the Software without restriction, including without limitation
#   the rights to use, copy, modify, merge, publish, distribute, sublicense,
#   and/or sell copies of the Software, and to permit persons to whom the
#   Software is furnished to do so, subject to the following conditions:
#
#   The above copyright notice and this permission notice shall be included
#   in all copies or substantial portions of the Software.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
#   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
#   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
#   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
#   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
#   OTHER DEALINGS IN THE SOFTWARE.
#
#---------------------------------------------

manualpage()
{
cat << _MANUALPAGE
Name

xdg-screensaver — command line tool for controlling the screensaver

Synopsis

xdg-screensaver suspend WindowID

xdg-screensaver resume WindowID

xdg-screensaver { activate | reset | status }

xdg-screensaver { --help | --manual | --version }

Description

xdg-screensaver provides commands to control the screensaver.

xdg-screensaver is for use inside a desktop session only. It is not recommended
to use xdg-screensaver as root.

Commands

suspend WindowID

    Suspends the screensaver and monitor power management. WindowID must be the
    X Window ID of an existing window of the calling application. The window
    must remain in existance for the duration of the suspension.

    WindowID can be represented as either a decimal number or as a hexadecimal
    number consisting of the prefix 0x followed by one or more hexadecimal
    digits.

    The screensaver can be suspended in relation to multiple windows at the
    same time. In that case screensaver operation is only restored once the
    screensaver has been resumed in relation to each of the windows

resume WindowID
    Resume the screensaver and monitor power management after being suspended.
    WindowID must be the same X Window ID that was passed to a previous call of
    xdg-screensaver suspend
activate
    Turns the screensaver on immediately. This may result in the screen getting
    locked, depending on existing system policies.
reset
    Turns the screensaver off immediately. On some systems the user may be
    asked to authenticate first before the screen is unlocked.
status
    Prints enabled to stdout if the screensaver is enabled to turn on after a
    period of inactivity and prints disabled if the screensaver is not enabled.

Options

--help
    Show command synopsis.
--manual
    Show this manualpage.
--version
    Show the xdg-utils version information.

Exit Codes

An exit code of 0 indicates success while a non-zero exit code indicates
failure. The following failure codes can be returned:

1
    Error in command line syntax.
3
    A required tool could not be found.
4
    The action failed.

Examples

xdg-screensaver suspend 0x1c00007

Causes the screensaver to be disabled till xdg-screensaver resume 0x1c00007 is
called. 0x1c00007 must be the X Window ID of an existing window.

_MANUALPAGE
}

usage()
{
cat << _USAGE
xdg-screensaver — command line tool for controlling the screensaver

Synopsis

xdg-screensaver suspend WindowID

xdg-screensaver resume WindowID

xdg-screensaver { activate | reset | status }

xdg-screensaver { --help | --manual | --version }

_USAGE
}

#@xdg-utils-common@

#----------------------------------------------------------------------------
#   Common utility functions included in all XDG wrapper scripts
#----------------------------------------------------------------------------

DEBUG()
{
  [ ${XDG_UTILS_DEBUG_LEVEL-0} -lt $1 ] && return 0;
  shift
  echo "$@" >&2
}

#-------------------------------------------------------------
# Exit script on successfully completing the desired operation

exit_success()
{
    if [ $# -gt 0 ]; then
        echo "$@"
        echo
    fi

    exit 0
}


#-----------------------------------------
# Exit script on malformed arguments, not enough arguments
# or missing required option.
# prints usage information

exit_failure_syntax()
{
    if [ $# -gt 0 ]; then
        echo "xdg-screensaver: $@" >&2
        echo "Try 'xdg-screensaver --help' for more information." >&2
    else
        usage
        echo "Use 'man xdg-screensaver' or 'xdg-screensaver --manual' for additional info."
    fi

    exit 1
}

#-------------------------------------------------------------
# Exit script on missing file specified on command line

exit_failure_file_missing()
{
    if [ $# -gt 0 ]; then
        echo "xdg-screensaver: $@" >&2
    fi

    exit 2
}

#-------------------------------------------------------------
# Exit script on failure to locate necessary tool applications

exit_failure_operation_impossible()
{
    if [ $# -gt 0 ]; then
        echo "xdg-screensaver: $@" >&2
    fi

    exit 3
}

#-------------------------------------------------------------
# Exit script on failure returned by a tool application

exit_failure_operation_failed()
{
    if [ $# -gt 0 ]; then
        echo "xdg-screensaver: $@" >&2
    fi

    exit 4
}

#------------------------------------------------------------
# Exit script on insufficient permission to read a specified file

exit_failure_file_permission_read()
{
    if [ $# -gt 0 ]; then
        echo "xdg-screensaver: $@" >&2
    fi

    exit 5
}

#------------------------------------------------------------
# Exit script on insufficient permission to read a specified file

exit_failure_file_permission_write()
{
    if [ $# -gt 0 ]; then
        echo "xdg-screensaver: $@" >&2
    fi

    exit 6
}

check_input_file()
{
    if [ ! -e "$1" ]; then
        exit_failure_file_missing "file '$1' does not exist"
    fi
    if [ ! -r "$1" ]; then
        exit_failure_file_permission_read "no permission to read file '$1'"
    fi
}

check_vendor_prefix()
{
    file=`basename "$1"`
    case "$file" in
       [a-zA-Z]*-*)
         return
         ;;
    esac

    echo "xdg-screensaver: filename '$file' does not have a proper vendor prefix" >&2
    echo 'A vendor prefix consists of alpha characters ([a-zA-Z]) and is terminated' >&2
    echo 'with a dash ("-"). An example filename is '"'example-$file'" >&2
    echo "Use --novendor to override or 'xdg-screensaver --manual' for additional info." >&2
    exit 1
}

check_output_file()
{
    # if the file exists, check if it is writeable
    # if it does not exists, check if we are allowed to write on the directory
    if [ -e "$1" ]; then
        if [ ! -w "$1" ]; then
            exit_failure_file_permission_write "no permission to write to file '$1'"
        fi
    else
        DIR=`dirname "$1"`
        if [ ! -w "$DIR" -o ! -x "$DIR" ]; then
            exit_failure_file_permission_write "no permission to create file '$1'"
        fi
    fi
}

#----------------------------------------
# Checks for shared commands, e.g. --help

check_common_commands()
{
    while [ $# -gt 0 ] ; do
        parm="$1"
        shift

        case "$parm" in
            --help)
            usage
            echo "Use 'man xdg-screensaver' or 'xdg-screensaver --manual' for additional info."
            exit_success
            ;;

            --manual)
            manualpage
            exit_success
            ;;

            --version)
            echo "xdg-screensaver 1.0beta2"
            exit_success
            ;;
        esac
    done
}

check_common_commands "$@"
if [ ${XDG_UTILS_DEBUG_LEVEL-0} -lt 1 ]; then
    # Be silent
    xdg_redirect_output=" > /dev/null 2> /dev/null"
else
    # All output to stderr
    xdg_redirect_output=" >&2"
fi

#--------------------------------------
# Checks for known desktop environments
# set variable DE to the desktop environments name, lowercase

detectDE()
{
    if [ x"$KDE_FULL_SESSION" = x"true" ]; then DE=kde;
    elif [ x"$GNOME_DESKTOP_SESSION_ID" != x"" ]; then DE=gnome;
    elif xprop -root _DT_SAVE_MODE | grep ' = \"xfce4\"$' >/dev/null 2>&1; then DE=xfce;
    fi
}

#----------------------------------------------------------------------------



# Check if we can use "mv -T" 
if mv -T ... ... 2>&1 | grep '\.\.\.' > /dev/null ; then
   # We can securely move files in /tmp with mv -T
   DEBUG 1 "mv -T available"
   MV="mv -T"
   screensaver_file="/tmp/xdg-screensaver-$USER-"`echo $DISPLAY | sed 's/:/-/g'`
else
   # No secure moves available, use home dir
   DEBUG 1 "mv -T not available"
   MV="mv"
   screensaver_file="$HOME/.xdg-screensaver-"`echo $HOSTNAME-$DISPLAY | sed 's/:/-/g'`
fi
lockfile_command=`which lockfile 2> /dev/null`

lockfile()
{
  if [ -n "$lockfile_command" ] ; then
     $lockfile_command -1 -l 10 -s 3 "$screensaver_file".lock
  else
     # Poor man's attempt at doing a lockfile
     # Be careful not to facilitate a symlink attack
     local try
     try=0
     while ! ln -s "$screensaver_file".lock "$screensaver_file".lock 2> /dev/null;
     do
        sleep 1
        try=$(($try+1))
        if [ $try -eq 3 ] ; then 
            rm -f "$screensaver_file".lock || return # Can't remove lockfile
            try=0
        fi
     done
  fi
}

unlockfile()
{
  rm -f "$screensaver_file".lock
}

perform_action()
{
  # Always set the Xorg screensaver first
  #screensaver_xset "$1"
  #xset_err=$?
  xset_err=0
  result=1
  
  case "$DE" in
    kde)
      screensaver_kde "$1"
      ;;

    gnome)
      screensaver_gnome "$1"
      ;;
  esac
}

cleanup_suspend()
{
  lockfile
  tmpfile=`mktemp`
  grep -v "$window_id:" "$screensaver_file" > "$tmpfile" 2> /dev/null
  $MV "$tmpfile" "$screensaver_file"
  if [ ! -s "$screensaver_file" ] ; then
      rm "$screensaver_file"
      unlockfile
      # $screensaver_file is empty, do resume
      perform_action resume
  else
      unlockfile
  fi
}

do_resume()
{
  lockfile # Obtain lockfile
  # Find the PID of the trackingprocess
  xprop_pid=`grep "$window_id:" "$screensaver_file" 2> /dev/null | cut -d ':' -f 2` 
  unlockfile # Free lockfile
  if [ -n "$xprop_pid" ] && ps -p "$xprop_pid" 2> /dev/null | grep xprop > /dev/null; then
     # Kill the tracking process 
     kill -TERM $xprop_pid
  fi
  cleanup_suspend  
}

XPROP=`which xprop 2> /dev/null`

check_window_id()
{
  if [ -z "$XPROP" ]; then
     DEBUG 3 "xprop not found"
     return
  fi 
  DEBUG 2 "Running $XPROP -id $window_id"
  if $XPROP -id $window_id > /dev/null 2> /dev/null; then
     DEBUG 3 Window $window_id exists
  else
     DEBUG 3 Window $window_id does not exist
     exit_failure_operation_failed "Window $window_id does not exist"
  fi
}

track_window()
{
  if [ -z "$XPROP" ]; then
     # Don't track window if we don't have xprop
     return
  fi
  lockfile

  tmpfile=`mktemp`
  # Filter stale entries from the xdg-screensaver status file
  # Return if $window_id is being tracked already
  (
    already_tracked=1
    IFS_save="$IFS"
    IFS=":"
    while read wid pid; do
      if ps -p "$pid" 2> /dev/null | grep xprop > /dev/null; then
        echo "$wid:$pid"
        if [ $wid = $window_id ] ; then
          already_tracked=0
        fi   
      fi
    done
    IFS="$IFS_save"
    exit $already_tracked
  ) < $screensaver_file > $tmpfile
  already_tracked=$?

  if [ "$already_tracked" -eq "0" ] ; then
    $MV "$tmpfile" "$screensaver_file"
    # We are already tracking $window_id, don't do anything
    unlockfile
    return
  fi

  # Start tracking $window_id
  $XPROP -id $window_id -spy > /dev/null &
  xprop_pid=$!
  # Add window_id and xprop_pid to the xdg-screensave status file
  echo "$window_id:$xprop_pid" >> $tmpfile
  $MV "$tmpfile" "$screensaver_file"
  unlockfile
  # Wait for xprop to edit, it means that the window disappeared
  wait $xprop_pid
  # Clean up the administration and resume the screensaver
  cleanup_suspend
}

screensaver_xset()
{
    TIMEOUT=`xset q | /bin/grep -A 2 ^Screen | /bin/grep timeout | awk '{print $2}'` 
    DPMS=`xset q | /bin/grep 'DPMS is' | awk '{print $3}'` 

    if [ "$DPMS" = "Enabled" ]; then
        DPMS="+dpms"
    else
        DPMS="-dpms"
    fi

    case "$1" in
        # New arg Window ID, create lockfile with $WINDOWID
        suspend)
        xset s off -dpms
        ;;

        resume)
        # Restores screensaver to its default settings
        xset s default "$DPMS"
        ;;

        activate)
        # Turns the screensaver on right now
        xset s activate
        ;;

        reset)
        # Turns the screensaver off right now
        xset s reset
        ;;

        status)
        if [ ${TIMEOUT:0} -eq 0 ]; then
            echo "disabled"
        else
            echo "enabled"
        fi
        ;;
    esac

    return $?
}

screensaver_kde()
{
    case "$1" in
        suspend) 
        dcop kdesktop KScreensaverIface enable false > /dev/null
        result=$?
        ;;

        resume)
        dcop kdesktop KScreensaverIface configure > /dev/null
        result=$?
        ;;
        
        activate)
        dcop kdesktop KScreensaverIface save > /dev/null
        result=$?
        ;;
        
        reset)
        # Turns the screensaver off right now
        dcop kdesktop KScreensaverIface quit > /dev/null
        result=$?
        ;;

        status)
        status=`dcop kdesktop KScreensaverIface isEnabled`
        result=$?
        if [ x"$status" = "xtrue" ]; then
            echo "enabled"
        elif [ x"$status" = "xfalse" ]; then
            echo "disabled"
        else
            echo "ERROR:  kdesktop KScreensaverIface isEnabled returned '$status'" >&2
            return 1
        fi
        ;;

        *)
        echo "ERROR:  Unknown command '$1'" >&2
        return 1
        ;;
    esac
}

screensaver_gnome()
{
# TODO
# There seems to be a DBUS interface for gnome-screensaver
# See http://lists.mplayerhq.hu/pipermail/mplayer-dev-eng/2006-April/042579.html and
# http://cvs.gnome.org/viewcvs/gnome-screensaver/src/gs-listener-dbus.c?rev=1.36&view=log
# A problem seems to be that Inhibit is tied to the lifetime of the DBUS appname and
# this can not be used from a script
    case "$1" in
        suspend) 
        # Don't know how to suspend properly
        gnome-screensaver-command --exit > /dev/null 2> /dev/null
        result=0
        ;;

        resume)
        # Don't know how to suspend properly
        # This may start the gnome-screensaver even if it wasn't running before
        gnome-screensaver > /dev/null 2> /dev/null
        result=0
        ;;
        
        activate)
        gnome-screensaver-command --activate > /dev/null 2> /dev/null
        result=$?
        ;;
        
        reset)
        # Turns the screensaver off right now
        gnome-screensaver-command --deactivate > /dev/null 2> /dev/null
        result=$?
        ;;

        status)
        # Don't know how to suspend properly
        result=0
        if gnome-screensaver-command --query > /dev/null 2> /dev/null >&2; then
            echo "enabled"
        else
            echo "disabled"
        fi
        ;;

        *)
        echo "ERROR:  Unknown command '$1" >&2
        return 1
        ;;
    esac
}

[ x"$1" != x"" ] || exit_failure_syntax

action=
window_id=

case $1 in
  suspend)
    action="$1"
    
    shift

    if [ -z "$1" ] ; then 
        exit_failure_syntax "WindowID argument missing"
    fi
    
    window_id="$1"
    check_window_id
    ;;

  resume)
    action="$1"
    
    shift

    if [ -z "$1" ] ; then 
        exit_failure_syntax "WindowID argument missing"
    fi
    
    window_id="$1"
    check_window_id
    ;;

  activate)
    action="$1"
    ;;

  reset)
    action="$1"
    ;;

  status)
    action="$1"
    ;;
    
  *)
    exit_failure_syntax "unknown command '$1'"
    ;;
esac



detectDE

if [ "$action" = "resume" ] ; then
    do_resume
    exit_success
fi

perform_action "$action"

if [ "$action" = "suspend" ] ; then
    # Start tracking $window_id and resume the screensaver once it disappears
    ( track_window  ) 2> /dev/null > /dev/null &
fi        

if [ $result -eq 0 ]; then
    exit_success
elif [ $xset_err -eq 0 ]; then
    exit_success
else
    exit_failure_operation_failed
fi
