#!/bin/sh
#---------------------------------------------
#   xdg-desktop-menu
#
#   Utility script to install menu items on a Linux desktop.
#   Refer to the usage() function below for usage.
#
#   Copyright 2006, Kevin Krammer <kevin.krammer@gmx.at>
#   Copyright 2006, Jeremy White <jwhite@codeweavers.com>
#
#   LICENSE:
#
#   Permission is hereby granted, free of charge, to any person obtaining a
#   copy of this software and associated documentation files (the "Software"),
#   to deal in the Software without restriction, including without limitation
#   the rights to use, copy, modify, merge, publish, distribute, sublicense,
#   and/or sell copies of the Software, and to permit persons to whom the
#   Software is furnished to do so, subject to the following conditions:
#
#   The above copyright notice and this permission notice shall be included
#   in all copies or substantial portions of the Software.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
#   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
#   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
#   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
#   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
#   OTHER DEALINGS IN THE SOFTWARE.
#
#---------------------------------------------

manualpage()
{
cat << _MANUALPAGE
Name

xdg-desktop-menu â€” command line tool for (un)installing desktop menu items

Synopsis

xdg-desktop-menu install [--noupdate] [--vendor vendor-id] { --user | --system
} { desktop-file | menu-file | directory-file }

xdg-desktop-menu uninstall [--noupdate] [--vendor vendor-id] { --user |
--system } { desktop-file | menu-file | directory-file }

xdg-desktop-menu forceupdate { --user | --system }

xdg-desktop-menu { --help | --manual | --version }

Description

The xdg-desktop-menu program can be used to install new items to the desktop's
application menu.

The application menu works according to the XDG Desktop Menu Specification at
http://www.freedesktop.org/Standards/menu-spec

Commands

install

    Install applications or submenus into the desktop menu system.

    desktop-file: Installs the *.desktop file indicated by desktop-file to the
    menu system. A desktop file represents a single application in the menu.
    Desktop files are defined by the freedesktop.org Desktop Entry
    Specification. The most important aspects of *.desktop files are summarized
    below.

    menu-file: Installs the *.menu file indicated by menu-file to the menu
    system. A menu file describes the location and contents for one or more new
    submenus. Each submenu must reference a *.directory file.

    directory-file: Installs the *.directory file indicated by directory-file
    to the menu system. A directory file provides the name and icon for a
    submenu.

uninstall
    Remove applications or submenus from the desktop menu system previously
    installed with xdg-desktop-menu install.
forceupdate
    Force an update of the menu system. This is only useful if the last call to
    xdg-desktop-menu included the --noupdate option.

Options

--noupdate
    Postpone updating the menu system. If multiple updates to the menu system
    are made in sequence this flag can be used to indicate that additional
    changes will follow and that it is not necassery to update the menu system
    right away.
--vendor vendor-id
    Adds vendor-id as a prefix when installing desktop and directory files.
--user
    Installs or uninstalls the file for the current user only.
--system
    Installs or uninstalls the file for all users on the system. Usually only
    root is allowed to do this.
--help
    Show command synopsis.
--manual
    Show this manualpage.
--version
    Show the xdg-utils version information.

Desktop Files

An application item in the application menu is represented by a *.desktop file.
A *.desktop file consists of a [Desktop Entry] header followed by several Key=
Value lines.

A *.desktop file can provide a name and description for an application in
several different languages. This is done by adding a language code as used by
LC_MESSAGES in square brackets behind the Key. This way one can specify
different values for the same Key depending on the currently selected language.

The following keys are often used:

Value=1.0
    This is a mandatory field to indicate that the *.desktop file follows the
    1.0 version of the specification.
Type=Application
    This is a mandatory field that indicates that the *.desktop file describes
    an application launcher.
Name=Application Name
    The name of the application. For example Mozilla
GenericName=Generic Name
    A generic description of the application. For example Web Browser
Comment=Comment
    Optional field to specify a tooltip for the application. For example Visit
    websites on the Internet
Icon=Icon File
    The icon to use for the application. This can either be an absolute path to
    an image file or an icon-name. If an icon-name is provided an image lookup
    by name is done in the user's current icon theme. The xdg-icon-resource
    command can be used to install image files into icon themes. The advantage
    of using an icon-name instead of an absolute path is that with an icon-name
    the application icon can be provided in several different sizes as well as
    in several differently themed styles.
Exec=Command Line
    The command line to start the application. If the application can open
    files the %f placeholder should be specified. When a file is dropped on the
    application launcher the %f is replaced with the file path of the dropped
    file. If multiple files can be specified on the command line the %F
    placeholder should be used instead of %f. If the application is able to
    open URLs in addition to local files then %u or %U can be used instead of
    %f or %F.
Categories=Categories
    A list of categories separated by semi-colons. A category is a keyword that
    describes and classifies the application. By default applications are
    organized in the application menu based on category. The XDG Desktop Menu
    Specification defines a large number of predefined categories.
MimeType=Mimetypes
    A list of mimetypes separated by semi-colons. This field is used to
    indicate which file types the application is able to open.

For a complete oveview of the *.desktop file format please visit http://
www.freedesktop.org/wiki/Standards/desktop-entry-spec

Environment Variables

xdg-desktop-menu honours the following environment variables:

XDG_UTILS_DEBUG_LEVEL
    Setting this environment variable to a non-zero numerical value makes
    xdg-desktop-menu do more verbose reporting on stderr. Setting a higher
    value increases the verbosity.

Exit Codes

An exit code of 0 indicates success while a non-zero exit code indicates
failure. The following failure codes can be returned:

1
    Error in command line syntax.
2
    One of the files passed on the command line did not exist.
3
    A required tool could not be found.
4
    The action failed.

See Also

xdg-desktop-icon(1), xdg-icon-resource(1), xdg-mime(1)

Examples

The company ShinyThings Inc. has developed an application named "WebMirror" and
would like to add it to the application menu. The company will use
"shinythings" as its vendor id. In order to add the application to the menu
there needs to be a .desktop file with a suitable Categories entry:

webmirror.desktop:

  [Desktop Entry]
  Encoding=UTF-8
  Type=Application

  Exec=webmirror
  Icon=webmirror

  Name=WebMirror
  Name[nl]=WebSpiegel

  Categories=Network;WebDevelopment;

Now the xdg-desktop-menu tool can be used to add the webmirror.desktop file to
the desktop application menu:

xdg-desktop-menu install --system --vendor shinythings ./webmirror.desktop

Note that for the purpose of this example the menu items are available in two
languages, English and Dutch. The language code for Dutch is nl.

In the next example the company ShinyThings Inc. wants to add its own submenu
to the desktop application menu consisting of a "WebMirror" menu item and a
"WebMirror Admin Tool" menu item.

First the company needs to create two .desktop files that describe the two menu
items, this time no Categories item is needed:

webmirror.desktop:

  [Desktop Entry]
  Encoding=UTF-8
  Type=Application

  Exec=webmirror
  Icon=webmirror

  Name=WebMirror
  Name[nl]=WebSpiegel


webmirror-admin.desktop:

  [Desktop Entry]
  Encoding=UTF-8
  Type=Application

  Exec=webmirror-admintool
  Icon=webmirror-admintool

  Name=WebMirror Admin Tool
  Name[nl]=WebSpiegel Administratie Tool

The files can be installed with:

xdg-desktop-menu install --system --noupdate --vendor shinythings ./webmirror.desktop
xdg-desktop-menu install --system --noupdate --vendor shinythings ./webmirror-admin.desktop

Because multiple items are added the --noupdate option has been used.

In addition a .directory file needs to be created to provide a title and icon
for the sub-menu itself:

webmirror.directory:

  [Desktop Entry]
  Encoding=UTF-8

  Icon=webmirror-menu

  Name=WebMirror
  Name[nl]=WebSpiegel

This webmirror.directory file can be installed with:

xdg-desktop-menu install --system --noupdate --vendor shinythings ./webmirror.directory

The *.desktop and *.directory files reference icons with the names webmirror,
webmirror-admin and webmirror-menu which should also be installed. In this
example the icons are installed in two different sizes, once with a size of
22x22 pixels and once with a size of 64x64 pixels:

xdg-icon-resource install --system --size 22 ./wmicon-22.png webmirror.png
xdg-icon-resource install --system --size 22 ./wmicon-menu-22.png webmirror-menu.png
xdg-icon-resource install --system --size 22 ./wmicon-admin-22.png webmirror-admin.png
xdg-icon-resource install --system --size 64 ./wmicon-64.png webmirror.png
xdg-icon-resource install --system --size 64 ./wmicon-menu-64.png webmirror-menu.png
xdg-icon-resource install --system --size 64 ./wmicon-admin-64.png webmirror-admin.png

The last step is to provide a .menu file that links it all togther:

webmirror.menu:

  <!DOCTYPE Menu PUBLIC "-//freedesktop//DTD Menu 1.0//EN"
     "http://www.freedesktop.org/standards/menu-spec/menu-1.0.dtd">
  <Menu>
    <Name>Applications</Name>
    <Menu>
      <Name>WebMirror</Name>
      <Directory>shinythings-webmirror.directory</Directory>
      <Include>
        <Filename>shinythings-webmirror.desktop</Filename>
        <Filename>shinythings-webmirror-admin.desktop</Filename>
      </Include>
    </Menu>
  </Menu>

The webmirror.menu file can be installed with:

xdg-desktop-menu install --system --noupdate --vendor shinythings ./webmirror.menu

After installing multiple files with --noupdate make sure to force an update:

xdg-desktop-menu forceupdate --system

_MANUALPAGE
}

usage()
{
cat << _USAGE
xdg-desktop-menu â€” command line tool for (un)installing desktop menu items

Synopsis

xdg-desktop-menu install [--noupdate] [--vendor vendor-id] { --user | --system
} { desktop-file | menu-file | directory-file }

xdg-desktop-menu uninstall [--noupdate] [--vendor vendor-id] { --user |
--system } { desktop-file | menu-file | directory-file }

xdg-desktop-menu forceupdate { --user | --system }

xdg-desktop-menu { --help | --manual | --version }

_USAGE
}

#@xdg-utils-common@

#----------------------------------------------------------------------------
#   Common utility functions included in all XDG wrapper scripts
#----------------------------------------------------------------------------

DEBUG()
{
  [ ${XDG_UTILS_DEBUG_LEVEL-0} -lt $1 ] && return 0;
  shift
  echo "$@" >&2
}

#-------------------------------------------------------------
# Exit script on successfully completing the desired operation

exit_success()
{
    if [ $# -gt 0 ]; then
        echo "$@"
        echo
    fi

    exit 0
}


#-----------------------------------------
# Exit script on malformed arguments, not enough arguments
# or missing required option.
# prints usage information

exit_failure_syntax()
{
    if [ $# -gt 0 ]; then
        echo "xdg-desktop-menu: $@" >&2
        echo "Try 'xdg-desktop-menu --help' for more information." >&2
    else
        usage
        echo "Use 'man xdg-desktop-menu' or 'xdg-desktop-menu --manual' for additional info." 
    fi

    exit 1
}

#-------------------------------------------------------------
# Exit script on missing file specified on command line

exit_failure_file_missing()
{
    if [ $# -gt 0 ]; then
        echo "xdg-desktop-menu: $@" >&2
    fi

    exit 2
}

#-------------------------------------------------------------
# Exit script on failure to locate necessary tool applications

exit_failure_operation_impossible()
{
    if [ $# -gt 0 ]; then
        echo "xdg-desktop-menu: $@" >&2
    fi

    exit 3
}

#-------------------------------------------------------------
# Exit script on failure returned by a tool application

exit_failure_operation_failed()
{
    if [ $# -gt 0 ]; then
        echo "xdg-desktop-menu: $@" >&2
    fi

    exit 4
}


#----------------------------------------
# Checks for shared commands, e.g. --help

check_common_commands()
{
    while [ $# -gt 0 ] ; do
        parm="$1"
        shift

        case "$parm" in
            --help)
            usage
            echo "Use 'man xdg-desktop-menu' or 'xdg-desktop-menu --manual' for additional info." 
            exit_success
            ;;

            --manual)
            manualpage
            exit_success
            ;;

            --version)
            echo "xdg-desktop-menu 1.0beta1"
            exit_success
            ;;
        esac
    done
}

check_common_commands "$@"
if [ ${XDG_UTILS_DEBUG_LEVEL-0} -lt 1 ]; then
    # Be silent
    xdg_redirect_output=" > /dev/null 2> /dev/null" 
else
    # All output to stderr
    xdg_redirect_output=" >&2"
fi

#--------------------------------------
# Checks for known desktop environments
# set variable DE to the desktop environments name, lowercase

detectDE()
{
    if [ x"$KDE_FULL_SESSION" = x"true" ]; then DE=kde;
    elif [ x"$GNOME_DESKTOP_SESSION_ID" != x"" ]; then DE=gnome;
    elif xprop -root _DT_SAVE_MODE | grep ' = \"xfce4\"$' >/dev/null 2>&1; then DE=xfce;
    fi
}

#----------------------------------------------------------------------------



update_desktop_database()
{
#    echo Update desktop database: $mode
    if [ "$mode" = "system" ] ; then
        for x in `echo $PATH | sed 's/:/ /g'` /opt/gnome/bin; do
           if [ -x $x/update-desktop-database ] ; then
              DEBUG 1 "Running $x/update-desktop-database"
              eval '$x/update-desktop-database'$xdg_redirect_output
              return
           fi
        done
    fi
}

[ x"$1" != x"" ] || exit_failure_syntax

mode=
action=
update=yes
desktop_file=

case $1 in
  install)
    action=install
    ;;

  uninstall)
    action=uninstall
    ;;

  forceupdate)
    action=forceupdate
    ;;

  *)
    exit_failure_syntax "unknown command '$1'"
    ;;
esac

shift



while [ $# -gt 0 ] ; do
    parm="$1"
    shift

    case "$parm" in
      --noupdate)
        update=no
        ;;

      --user)
        mode=user
        ;;

      --system)
        mode=system
        ;;

      --vendor)
        if [ -z "$1" ] ; then
            exit_failure_syntax "vendor-id argument missing for --vendor"
        fi
        vendor="$1"
        shift
        ;;

      -*)
        exit_failure_syntax "unexpected option '$parm'"
        ;;

      *)
        if [ -n "$desktop_file" ] ; then
            exit_failure_syntax "unexpected argument '$parm'"
        fi
        if [ "$action" = "install" ] ; then
            if [ ! -f "$parm" ] ; then
                exit_failure_file_missing "file '$parm' does not exist"
            fi
        fi
        desktop_file="$parm"
        ;;
    esac
done

# Shouldn't happen
if [ -z "$action" ] ; then
    exit_failure_syntax "command argument missing"
fi

if [ -z "$mode" ] ; then
    exit_failure_syntax "expected --user or --system option"
fi

if [ x"$action" = x"forceupdate" ] ; then
    update_desktop_database
    exit_success
fi

if [ -z "$desktop_file" ] ; then
    exit_failure_syntax "file argument missing"
fi

filetype=
xdg_dir_name=
case $desktop_file in
  *.desktop)
     filetype=desktop
     xdg_dir_name=applications
     ;;
  *.directory)
     fileype=directory
     xdg_dir_name=desktop-directories
     ;;
  *.menu)
     filetype=menu
     xdg_dir_name=menus/applications-merged
     ;;
  *)
     exit_failure_syntax "file to $action must be a *.desktop, *.directory or *.menu file"
     ;;
esac

if [ x"$filetype" = x"menu" ] ; then
    xdg_user_dir="$XDG_CONFIG_HOME"
    [ -n "$xdg_user_dir" ] || xdg_user_dir="$HOME/.config"
    xdg_user_dir="$xdg_user_dir/$xdg_dir_name"

    xdg_system_dirs="$XDG_CONFIG_DIRS"
    [ -n "$xdg_system_dirs" ] || xdg_system_dirs=/etc/xdg
    for x in `echo $xdg_system_dirs | sed 's/:/ /g'` ; do
        if [ -w $x/$xdg_dir_name ] ; then
            xdg_global_dir="$x/$xdg_dir_name"
            break
        fi
    done
    [ -w $xdg_global_dir ] || xdg_global_dir=
else
    xdg_user_dir="$XDG_DATA_HOME"
    [ -n "$xdg_user_dir" ] || xdg_user_dir="$HOME/.local/share"
    xdg_user_dir="$xdg_user_dir/$xdg_dir_name"

    xdg_system_dirs="$XDG_DATA_DIRS"
    [ -n "$xdg_system_dirs" ] || xdg_system_dirs=/usr/local/share/:/usr/share/
    for x in `echo $xdg_system_dirs | sed 's/:/ /g'` ; do
        if [ -w $x/$xdg_dir_name ] ; then
            xdg_global_dir="$x/$xdg_dir_name"
            break
        fi
    done
    [ -w $xdg_global_dir ] || xdg_global_dir=

    if [ x"$filetype" = x"desktop" ] ; then
        kde_user_dir="$HOME/.kde/share/applnk"
        kde_global_dir="/usr/share/applnk"
        [ -w $kde_global_dir ] || kde_global_dir=

        gnome_user_dir="$HOME/.gnome/apps"
        gnome_global_dir="/usr/share/gnome/apps"
        [ -w $gnome_global_dir ] || gnome_global_dir=
    fi
fi

DEBUG 3 "xdg_user_dir: $xdg_user_dir"
DEBUG 3 "xdg_global_dir: $xdg_global_dir"
DEBUG 3 "kde_user_dir: $kde_user_dir"
DEBUG 3 "kde_global_dir: $kde_global_dir"
DEBUG 3 "gnome_user_dir: $gnome_user_dir"
DEBUG 3 "gnome_global_dir: $gnome_global_dir"

if [ x"$mode" = x"user" ] ; then
    xdg_dir="$xdg_user_dir"
    kde_dir="$kde_user_dir"
    gnome_dir="$gnome_user_dir"
    my_umask=077
else
    xdg_dir="$xdg_global_dir"
    kde_dir="$kde_global_dir"
    gnome_dir="$gnome_global_dir"
    my_umask=022
    if [ -z "${xdg_dir}${kde_dir}${gnome_dir}" ] ; then
        [ `whoami` = "root" ] || rootmsg="Try as root or use --user."
        exit_failure_operation_impossible "No writable system menu directory found. $rootmsg"
    fi
fi


# echo "[xdg|$xdg_user_dir|$xdg_global_dir]"
# echo "[kde|$kde_user_dir|$kde_global_dir]"
# echo "[gnome|$gnome_user_dir|$gnome_global_dir]"

# echo "[using|$xdg_dir|$kde_dir|$gnome_dir]"

basefile=`basename $desktop_file`
[ -z $vendor ] || basefile="$vendor-$basefile"

DEBUG 1 "$action $desktop_file in $xdg_dir $kde_dir $gnome_dir"

case $action in
    install)
        save_umask=`umask`
        umask $my_umask

        for x in $xdg_dir $kde_dir $gnome_dir ; do
            mkdir -p $x
            eval 'cp $desktop_file $x/$basefile'$xdg_redirect_output
        done

        if [ -f $kde_dir/$basefile ] ; then
            echo "OnlyShowIn=Old;" >> $kde_dir/$basefile
        fi

        if [ -f $gnome_dir/$basefile ] ; then
            echo "OnlyShowIn=Old;" >> $gnome_dir/$basefile
        fi

        umask $save_umask
        ;;

    uninstall)
        for x in $xdg_dir $kde_dir $gnome_dir ; do
            rm -f $x/$basefile
        done

        ;;
esac

if [ x"$update" = x"yes" ] ; then
    update_desktop_database
fi

exit_success


