#!/bin/sh
#---------------------------------------------
#   xdg-icon
#
#   Utility script to install icons on a Linux desktop.
#   Works on most XDG compliant systems; does
#   not work everywhere.
#
#   Refer to the usage() function below for usage.
#
#   Copyright 2006, Kevin Krammer <kevin.krammer@gmx.at>
#   Copyright 2006, Jeremy White <jwhite@codeweavers.com>
#
#   LICENSE:
#
#   Permission is hereby granted, free of charge, to any person obtaining a
#   copy of this software and associated documentation files (the "Software"),
#   to deal in the Software without restriction, including without limitation
#   the rights to use, copy, modify, merge, publish, distribute, sublicense,
#   and/or sell copies of the Software, and to permit persons to whom the
#   Software is furnished to do so, subject to the following conditions:
#
#   The above copyright notice and this permission notice shall be included
#   in all copies or substantial portions of the Software.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
#   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
#   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
#   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
#   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
#   OTHER DEALINGS IN THE SOFTWARE.
#
#---------------------------------------------

examples()
{
cat << _EXAMPLES
Examples

   TBD
_EXAMPLES
}

usage()
{
cat << _USAGE
   xdg-icon -- command line tool for (un)installing icons

Synopsis

   xdg-icon install [--noupdate] [--theme theme] [--context context] [--size
   size] { --user | --system } icon-file

   xdg-icon uninstall [--noupdate] [--theme theme] [--context context]
   [--size size] { --user | --system } icon-file

   xdg-icon forceupdate [--theme theme] { --user | --system }

   xdg-icon { --help | --version }

_USAGE
}

#@xdg-utils-common@

#----------------------------------------------------------------------------
#   Common utility functions included in all XDG wrapper scripts
#----------------------------------------------------------------------------

#-------------------------------------------------------------
# Exit script on successfully completing the desired operation

exit_success()
{
    if [ $# -gt 0 ]; then
        echo "$@"
        echo
    fi

    exit 0
}


#-----------------------------------------
# Exit script on malformed arguments, not enough arguments
# or missing required option.
# prints usage information

exit_failure_syntax()
{
    if [ $# -gt 0 ]; then
        echo "$@" >&2
        echo >&2
    fi

    usage

    exit 1
}

#-------------------------------------------------------------
# Exit script on missing file specified on command line

exit_failure_file_missing()
{
    if [ $# -gt 0 ]; then
        echo "$@" >&2
        echo >&2
    fi

    exit 2
}

#-------------------------------------------------------------
# Exit script on failure to locate necessary tool applications

exit_failure_operation_impossible()
{
    if [ $# -gt 0 ]; then
        echo "$@" >&2
        echo >&2
    fi

    exit 3
}

#-------------------------------------------------------------
# Exit script on failure returned by a tool application

exit_failure_operation_failed()
{
    if [ $# -gt 0 ]; then
        echo "$@" >&2
        echo >&2
    fi

    exit 4
}


#----------------------------------------
# Checks for shared commands, e.g. --help

check_common_commands()
{
    while [ $# -gt 0 ] ; do
        parm=$1
        shift

        case $parm in
            --help)
            usage
            examples
            exit_success
            ;;

            --version)
            echo "xdg-utils technical-preview"
            exit_success
            ;;
        esac
    done
}

check_common_commands "$@"

#--------------------------------------
# Checks for known desktop environments
# set variable DE to the desktop environments name, lowercase

detectDE()
{
    if [ x"$KDE_FULL_SESSION" = x"true" ]; then DE=kde;
    elif [ x"$GNOME_DESKTOP_SESSION_ID" != x"" ]; then DE=gnome;
    elif xprop -root _DT_SAVE_MODE | grep ' = \"xfce4\"$' >/dev/null 2>&1; then DE=xfce;
    fi
}

#----------------------------------------------------------------------------



update_icon_database()
{
   for x in `echo $PATH | sed 's/:/ /g'` /opt/gnome/bin; do
      if [ -x $x/gtk-update-icon-cache ] ; then
         echo Running $x/gtk-update-icon-cache -f -t $1
         $x/gtk-update-icon-cache -f -t $1
         return
      fi
   done
}

[ x"$1" != x"" ] || exit_failure_syntax

mode=
action=
update=yes
size=
theme=hicolor
context=apps
icon_file=

case $1 in
  install)
    action=install
    ;;

  uninstall)
    action=uninstall
    ;;

  forceupdate)
    action=forceupdate
    ;;

  *)
  exit_failure_syntax "$1:  Invalid parameter/option"
  ;;
esac

shift


while [ $# -gt 0 ] ; do
    parm=$1
    shift

    case $parm in
      --noupdate)
        update=no
        ;;

      --user)
        mode=user
        ;;

      --system)
        mode=system
        ;;

      --theme)
        if [ -z "$1" ] ; then
            exit_failure_syntax "Error:  You must specify a theme."
        fi
        theme=$1
        shift
        ;;

      --size)
        if [ -z "$1" ] ; then
            exit_failure_syntax "Error:  You must specify a size."
        fi
        size=$1
        shift
        ;;

      --context)
        if [ -z "$1" ] ; then
            exit_failure_syntax "Error:  You must specify a context."
        fi
        context=$1
        shift
        ;;

      *)
        if [ -n "$icon_file" ] ; then
            exit_failure_syntax "Error:  Too many arguments: $parm"
        fi
        if [ "$action" = "install" ] ; then
            if [ ! -f "$parm" ] ; then
                exit_failure_file_missing "Error:  You must specify an existing file to install."
            fi
        fi
        icon_file=$parm
        ;;
    esac
done

if [ -z "$action" ] ; then
    exit_failure_syntax
fi

if [ -z "$mode" ] ; then
    exit_failure_syntax "Error:  You must specify either --user or --system"
fi

xdg_dir_name=icons/$theme

xdg_user_dir=$XDG_DATA_HOME
[ -n "$xdg_user_dir" ] || xdg_user_dir=$HOME/.local/share
xdg_user_dir=$xdg_user_dir/$xdg_dir_name

xdg_system_dirs=$XDG_DATA_DIRS
[ -n "$xdg_system_dirs" ] || xdg_system_dirs=/usr/local/share/:/usr/share/
for x in `echo $xdg_system_dirs | sed 's/:/ /g'` ; do
   if [ -w $x/$xdg_dir_name ] ; then
      xdg_global_dir=$x/$xdg_dir_name
      break
   fi
done
[ -w $xdg_global_dir ] || xdg_global_dir=

if [ x"$mode" = x"user" ] ; then
    xdg_base_dir=$xdg_user_dir
else
    xdg_base_dir=$xdg_global_dir
    if [ -z "$xdg_base_dir" ] ; then
        [ `whoami` = "root" ] || rootmsg="Try as root or use --user."
        exit_failure_operation_impossible "No writable system icon directory found. $rootmsg"
    fi
fi

if [ x"$action" = x"forceupdate" ] ; then
    update_icon_database $xdg_base_dir
    exit_success
fi

if [ -z "$icon_file" ] ; then
    exit_failure_syntax
fi

filetype=
xdg_size_name=
case $icon_file in
  *.xpm)
     filetype=bitmap
     if [ -z "$size" ] ; then
         exit_failure_syntax "Error:  You must specify the icon size with --size"
     fi
     xdg_size_name=${size}x${size}
     ;;
  *.png)
     filetype=bitmap
     if [ -z "$size" ] ; then
         exit_failure_syntax "Error:  You must specify the icon size with --size"
     fi
     xdg_size_name=${size}x${size}
     ;;
  *.svg)
     fileype=svg
     if [ -n "$size" ] ; then
         exit_failure_syntax "Error:  You may not specify an icon size for .svg icons"
     fi
     xdg_size_name=scalable
     ;;
  *)
     exit_failure_syntax "Error: File to $action must be a *.png, *.xpm or *.svg file"
     ;;
esac

#TODO: Legacy support
kde_user_dir=$HOME/.kde/share/applnk
kde_global_dir=/usr/share/applnk
[ -w $kde_global_dir ] || kde_global_dir=

gnome_user_dir=$HOME/.gnome/apps
gnome_global_dir=/usr/share/gnome/apps
[ -w $gnome_global_dir ] || gnome_global_dir=

if [ x"$mode" = x"user" ] ; then
    xdg_dir=$xdg_base_dir/$xdg_size_name/$context
    my_umask=077
else
    xdg_dir=$xdg_base_dir/$xdg_size_name/$context
    my_umask=022
fi


echo "[xdg|$xdg_user_dir|$xdg_global_dir]"
# echo "[kde|$kde_user_dir|$kde_global_dir]"
# echo "[gnome|$gnome_user_dir|$gnome_global_dir]"
echo "[using|$xdg_dir|$kde_dir|$gnome_dir]"

basefile=`basename $icon_file`

case $action in
    install)
        save_umask=`umask`
        umask $my_umask

        for x in $xdg_dir ; do
            mkdir -p $x
            cp $icon_file $x/$basefile
        done

        umask $save_umask
        ;;

    uninstall)
        for x in $xdg_dir ; do
            rm -f $x/$basefile
        done

        ;;
esac

if [ x"$update" = x"yes" ] ; then
    update_icon_database $xdg_base_dir
fi

exit_success
