#!/bin/sh
#---------------------------------------------
#   xdg-menu
#
#   Utility script to install menu items on a Linux desktop.
#   Works on most XDG compliant systems; does
#   not work everywhere.
#
#   Refer to the usage() function below for usage.
#
#   Copyright 2006, Kevin Krammer <kevin.krammer@gmx.at>
#   Copyright 2006, Jeremy White <jwhite@codeweavers.com>
#
#   LICENSE:
#
#---------------------------------------------

examples()
{
cat << _EXAMPLES
_EXAMPLES
}

usage()
{
cat << _USAGE
_USAGE
}

#@xdg-utils-common@

update_desktop_database()
{
#    echo Update desktop database: $mode
    if [ "$mode" = "system" ] ; then
        for x in `echo $PATH | sed 's/:/ /g'` /opt/gnome/bin; do
           if [ -x $x/update-desktop-database ] ; then
              echo Running $x/update-desktop-database
              $x/update-desktop-database
           fi
        done
    fi
}

[ x"$1" != x"" ] || exit_failure_arg_count

mode=
action=
update=yes
desktop_file=
while [ $# -gt 0 ] ; do
    parm=$1
    shift

    case $parm in
      --install)
        if [ -n "$action" ] ; then
            exit_failure_arg_count "Error:  Too many options:" $parm $1
        fi
        if [ ! -f "$1" ] ; then
            exit_failure_arg_count "Error:  You must specify an existing file to install."
        fi

        action=install
        desktop_file=$1
        shift
        ;;

      --uninstall)
        if [ -n "$action" ] ; then
            exit_failure_arg_count "Error:  Too many options:" $parm $1
        fi
        if [ -z "$1" ] ; then
            exit_failure_arg_count "Error:  You must specify a file to uninstall."
        fi
        action=uninstall
        desktop_file=$1
        shift
        ;;

      --forceupdate)
        if [ -n "$action" ] ; then
            exit_failure_arg_count "Error:  Too many options:" $parm $1
        fi

        action=forceupdate
        ;;

      --noupdate)
        update=no
        ;;

      --user)
        mode=user
        ;;

      --system)
        mode=system
        ;;

      --vendor)
        if [ -z "$1" ] ; then
            exit_failure_arg_count "Error:  You must specify a vendor-id."
        fi
        vendor=$1
        shift
        ;;

      *)
        exit_failure_arg_malformed "$parm:  Invalid parameter/option"
        ;;
    esac
done

if [ -z "$mode" ] ; then
    exit_failure_arg_malformed "Error:  You must specify either --user or --system"
fi

if [ -z "$action" ] ; then
    exit_failure_arg_count
fi

if [ x"$action" = x"forceupdate" ] ; then
    update_desktop_database
    exit_success
fi

filetype=
xdg_dir_name=
case $desktop_file in
  *.desktop)
     filetype=desktop
     xdg_dir_name=applications
     ;;
  *.directory)
     fileype=directory
     xdg_dir_name=desktop-directories
     ;;
  *.menu)
     filetype=menu
     xdg_dir_name=menus/applications-merged
     ;;
  *)
     exit_failure_arg_malformed "Error: File to $action must be a *.desktop, *.directory or *.menu file"
     ;;
esac

if [ x"$filetype" = x"menu" ] ; then
    xdg_user_dir=$XDG_CONFIG_HOME
    [ -n "$xdg_user_dir" ] || xdg_user_dir=$HOME/.config
    xdg_user_dir=$xdg_user_dir/$xdg_dir_name

    xdg_system_dirs=$XDG_CONFIG_DIRS
    [ -n "$xdg_system_dirs" ] || xdg_system_dirs=/etc/xdg
    for x in `echo $xdg_system_dirs | sed 's/:/ /g'` ; do
        if [ -w $x/$xdg_dir_name ] ; then
            xdg_global_dir=$x/$xdg_dir_name
            break
        fi
    done
    [ -w $xdg_global_dir ] || xdg_global_dir=
else
    xdg_user_dir=$XDG_DATA_HOME
    [ -n "$xdg_user_dir" ] || xdg_user_dir=$HOME/.local/share
    xdg_user_dir=$xdg_user_dir/$xdg_dir_name

    xdg_system_dirs=$XDG_DATA_DIRS
    [ -n "$xdg_system_dirs" ] || xdg_system_dirs=/usr/local/share/:/usr/share/
    for x in `echo $xdg_system_dirs | sed 's/:/ /g'` ; do
        if [ -w $x/$xdg_dir_name ] ; then
            xdg_global_dir=$x/$xdg_dir_name
            break
        fi
    done
    [ -w $xdg_global_dir ] || xdg_global_dir=

    if [ x"$filetype" = x"desktop" ] ; then
        kde_user_dir=$HOME/.kde/share/applnk
        kde_global_dir=/usr/share/applnk
        [ -w $kde_global_dir ] || kde_global_dir=

        gnome_user_dir=$HOME/.gnome/apps
        gnome_global_dir=/usr/share/gnome/apps
        [ -w $gnome_global_dir ] || gnome_global_dir=
    fi
fi


if [ x"$mode" = x"user" ] ; then
    xdg_dir=$xdg_user_dir
    kde_dir=$kde_user_dir
    gnome_dir=$gnome_user_dir
    my_umask=077
else
    xdg_dir=$xdg_global_dir
    kde_dir=$kde_global_dir
    gnome_dir=$gnome_global_dir
    my_umask=022
    if [ -n "$xdg_dir $kde_dir $gnome_dir" ] ; then
        [ `whoami` = "root" ] || rootmsg="Try as root or use --user."
        exit_failure_operation_impossible "No writable system menu directory found. $rootmsg"
    fi
fi


# echo "[xdg|$xdg_user_dir|$xdg_global_dir]"
# echo "[kde|$kde_user_dir|$kde_global_dir]"
# echo "[gnome|$gnome_user_dir|$gnome_global_dir]"

# echo "[using|$xdg_dir|$kde_dir|$gnome_dir]"

basefile=`basename $desktop_file`
[ -z $vendor ] || basefile=$vendor-$basefile

case $action in
    install)
        save_umask=`umask`
        umask $my_umask

        for x in $xdg_dir $kde_dir $gnome_dir ; do
            mkdir -p $x
            cp $desktop_file $x/$basefile
        done

        if [ -f $kde_dir/$basefile ] ; then
            echo "OnlyShowIn=Old;" >> $kde_dir/$basefile
        fi

        if [ -f $gnome_dir/$basefile ] ; then
            echo "OnlyShowIn=Old;" >> $gnome_dir/$basefile
        fi

        umask $save_umask
        ;;

    uninstall)
        for x in $xdg_dir $kde_dir $gnome_dir ; do
            rm -f $x/$basefile
        done

        ;;
esac

if [ x"$update" = x"yes" ] ; then
    update_desktop_database
fi

exit_success


