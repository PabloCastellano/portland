#!/bin/sh
#---------------------------------------------
#   xdg-file-dialog
#
#   Utility script to file selection dialogs
#   on XDG compliant systems.
#
#   Refer to the usage() function below for usage.
#
#   Copyright 2006, Kevin Krammer <kevin.krammer@gmx.at>
#
#   LICENSE:
#
#   Permission is hereby granted, free of charge, to any person obtaining a
#   copy of this software and associated documentation files (the "Software"),
#   to deal in the Software without restriction, including without limitation
#   the rights to use, copy, modify, merge, publish, distribute, sublicense,
#   and/or sell copies of the Software, and to permit persons to whom the
#   Software is furnished to do so, subject to the following conditions:
#
#   The above copyright notice and this permission notice shall be included
#   in all copies or substantial portions of the Software.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
#   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
#   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
#   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
#   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
#   OTHER DEALINGS IN THE SOFTWARE.
#
#---------------------------------------------

examples()
{
cat << _EXAMPLES
Examples

 xdg-file-dialog --savefilename /tmp/foobar.png

   Asks for a save file name starting in directory /tmp and suggesting
   foobar.png as the filename

             xdg-file-dialog --title "Select a target folder" --directory /tmp


   Asks for a directory name starting in directory /tmp using the text
   "Select a target folder" as the dialog's title/caption.
_EXAMPLES
}

usage()
{
cat << _USAGE
   xdg-file-dialog -- command line tool for providing file and directory
   selection dialogs

Synopsis

   xdg-file-dialog [--help] [--version] [--title TITLE] { --openfilename
   FILENAME | --openfilenamelist FILENAME | --savefilename FILENAME |
   --directory DIRNAME }

_USAGE
}

#@xdg-utils-common@

#----------------------------------------------------------------------------
#   Common utility functions included in all XDG wrapper scripts
#----------------------------------------------------------------------------

#-------------------------------------------------------------
# Exit script on successfully completing the desired operation

exit_success()
{
    if [ $# -gt 0 ]; then
        echo "$@"
        echo
    fi

    exit 0
}


#-----------------------------------------
# Exit script on wrong number of arguments
# prints usage information

exit_failure_arg_count()
{
    if [ $# -gt 0 ]; then
        echo "$@"
        echo
    fi

    usage

    exit 1
}


#-----------------------------------
# Exit script on malformed arguments
# prints usage information

exit_failure_arg_malformed()
{
    if [ $# -gt 0 ]; then
        echo "$@"
        echo
    fi

    usage

    exit 2
}

#-------------------------------------------------------------
# Exit script on failure to locate necessary tool applications

exit_failure_operation_impossible()
{
    if [ $# -gt 0 ]; then
        echo "$@"
        echo
    fi

    exit 3
}

#-------------------------------------------------------------
# Exit script on failure returned by a tool application

exit_failure_operation_failed()
{
    if [ $# -gt 0 ]; then
        echo "$@"
        echo
    fi

    exit 4
}

#----------------------------------------
# Checks for shared commands, e.g. --help

check_common_commands()
{
    while [ $# -gt 0 ] ; do
        parm=$1
        shift

        case $parm in
            --help)
            usage
            examples
            exit_success
            ;;

            --version)
            echo "xdg-utils technical-preview"
            exit_success
            ;;
        esac
    done
}

check_common_commands "$@"

#--------------------------------------
# Checks for known desktop environments
# set variable DE to the desktop environments name, lowercase

detectDE()
{
    if [ x"$KDE_FULL_SESSION" = x"true" ]; then DE=kde;
    elif [ x"$GNOME_DESKTOP_SESSION_ID" != x"" ]; then DE=gnome;
    elif xprop -root _DT_SAVE_MODE | grep ' = \"xfce4\"$' >/dev/null 2>&1; then DE=xfce;
    fi
}

detectDE

#----------------------------------------------------------------------------



open_kde()
{
    DIALOG=`which kdialog`
    if [ $? -eq 0 ]; then
        if [ x"$TITLE" != x"" ]; then
            $DIALOG --title "$TITLE" --getopenfilename "$1" ""
        else
            $DIALOG --getopenfilename "$1" ""
        fi

        if [ $? -eq 0 ]; then
            exit_success
        else
            exit_failure_operation_failed
        fi
    else
        exit_failure_operation_impossible
    fi
}

open_zenity()
{
    DIALOG=`which zenity`
    if [ $? -eq 0 ]; then
        if [ x"$1" != x"" ]; then
            cd `dirname "$1"` 2>/dev/null
            FILENAME=`basename "$1"`
            if [ x"$FILENAME" != x"" ]; then
                FILENAME="--filename=""$FILENAME"
            fi
        fi

        if [ x"$FILENAME" != x"" ]; then
            if [ x"$TITLE" != x"" ]; then
                $DIALOG --title "$TITLE" --file-selection "$FILENAME"
            else
                $DIALOG --file-selection "$FILENAME"
            fi
        else
            if [ x"$TITLE" != x"" ]; then
                $DIALOG --title "$TITLE" --file-selection
            else
                $DIALOG --file-selection
            fi
        fi

        if [ $? -eq 0 ]; then
            exit_success
        else
            exit_failure_operation_failed
        fi
    else
        exit_failure_operation_impossible
    fi
}

open_multi_kde()
{
    DIALOG=`which kdialog`
    if [ $? -eq 0 ]; then
        if [ x"$TITLE" != x"" ]; then
            $DIALOG --title "$TITLE" --multiple --separate-output \
                    --getopenfilename "$1" ""
        else
            $DIALOG --multiple --separate-output --getopenfilename "$1" ""
        fi

        if [ $? -eq 0 ]; then
            exit_success
        else
            exit_failure_operation_failed
        fi
    else
        exit_failure_operation_impossible
    fi
}

open_multi_zenity()
{
    DIALOG=`which zenity`
    if [ $? -eq 0 ]; then
        if [ x"$1" != x"" ]; then
            cd `dirname "$1"` 2>/dev/null
            FILENAME=`basename "$1"`
            if [ x"$FILENAME" != x"" ]; then
                FILENAME="--filename=""$FILENAME"
            fi
        fi

        if [ x"$FILENAME" != x"" ]; then
            if [ x"$TITLE" != x"" ]; then
                LIST=`$DIALOG --title "$TITLE" --multiple --file-selection "$FILENAME"`
            else
                LIST=`$DIALOG --multiple --file-selection "$FILENAME"`
            fi
        else
            if [ x"$TITLE" != x"" ]; then
                LIST=`$DIALOG --title "$TITLE" --multiple --file-selection`
            else
                LIST=`$DIALOG --multiple --file-selection`
            fi
        fi

        if [ $? -eq 0 ]; then
            echo "$LIST" | sed s#'|'#\\n#g
            exit_success
        else
            exit_failure_operation_failed
        fi
    else
        exit_failure_operation_impossible
    fi
}

save_kde()
{
    DIALOG=`which kdialog`
    if [ $? -eq 0 ]; then
        if [ x"$TITLE" != x"" ]; then
            $DIALOG --title "$TITLE" --getsavefilename "$1" ""
        else
            $DIALOG --getsavefilename "$1" ""
        fi

        if [ $? -eq 0 ]; then
            exit_success
        else
            exit_failure_operation_failed
        fi
    else
        exit_failure_operation_impossible
    fi
}

save_zenity()
{
    DIALOG=`which zenity`
    if [ $? -eq 0 ]; then
        if [ x"$1" != x"" ]; then
            cd `dirname "$1"` 2>/dev/null
            FILENAME=`basename "$1"`
            if [ x"$FILENAME" != x"" ]; then
                FILENAME="--filename=""$FILENAME"
            fi
        fi

        if [ x"$FILENAME" != x"" ]; then
            if [ x"$TITLE" != x"" ]; then
                $DIALOG --title "$TITLE" --save --file-selection "$FILENAME"
            else
                $DIALOG --save --file-selection "$FILENAME"
            fi
        else
            if [ x"$TITLE" != x"" ]; then
                $DIALOG --title "$TITLE" --save --file-selection
            else
                $DIALOG --save --file-selection
            fi
        fi

        if [ $? -eq 0 ]; then
            exit_success
        else
            exit_failure_operation_failed
        fi
    else
        exit_failure_operation_impossible
    fi
}

directory_kde()
{
    DIALOG=`which kdialog`
    if [ $? -eq 0 ]; then
        if [ x"$TITLE" != x"" ]; then
            $DIALOG --title "$TITLE" --getexistingdirectory "$1" ""
        else
            $DIALOG --getexistingdirectory "$1" ""
        fi

        if [ $? -eq 0 ]; then
            exit_success
        else
            exit_failure_operation_failed
        fi
    else
        exit_failure_operation_impossible
    fi
}

directory_zenity()
{
    DIALOG=`which zenity`
    if [ $? -eq 0 ]; then
        if [ x"$1" != x"" ]; then
            cd "$1" 2>/dev/null
        fi

        if [ x"$TITLE" != x"" ]; then
            $DIALOG --title "$TITLE" --directory --file-selection
        else
            $DIALOG --directory --file-selection
        fi

        if [ $? -eq 0 ]; then
            exit_success
        else
            exit_failure_operation_failed
        fi
    else
        exit_failure_operation_impossible
    fi
}

check_title()
{
    TITLE=
    while [ x"$TITLE" = x"" -a $# -gt 0 ] ; do
        parm=$1
        shift

        if [ x"$parm" = x"--title" ]; then
            if [ x"$1" = x"" ]; then
                exit_failure_arg_count
            else
                TITLE="$1"
            fi
        fi
    done
}

[ x"$1" != x"" ] || exit_failure_arg_count

# check if optional title is specified and remove it if it is the first command
check_title "$@"
if [ x"$TITLE" != x"" ]; then
    shift
    shift
fi

if [ x"$1" = x"--openfilename" ]; then
    shift

    if [ $# -gt 1 ]; then
        exit_failure_arg_count
    fi;

    case "$DE" in
        kde)
        open_kde "$1"
        ;;

        gnome|xfce)
        open_zenity "$1"
        ;;

        *)
        exit_failure_operation_impossible "Sorry, no method available for getting a filename for opening"
        ;;
    esac
elif [ x"$1" = x"--openfilenamelist" ]; then
    shift

    if [ $# -gt 1 ]; then
        exit_failure_arg_count
    fi;

    case "$DE" in
        kde)
        open_multi_kde "$1"
        ;;

        gnome|xfce)
        open_multi_zenity "$1"
        ;;

        *)
        exit_failure_operation_impossible "Sorry, no method available for getting a list of filenames for opening"
        ;;
    esac
elif [ x"$1" = x"--savefilename" ]; then
    shift

    if [ $# -gt 1 ]; then
        exit_failure_arg_count
    fi;

    case "$DE" in
        kde)
        save_kde "$1"
        ;;

        gnome|xfce)
        save_zenity "$1"
        ;;

        *)
        exit_failure_operation_impossible "Sorry, no method available for getting a filename for saving"
        ;;
    esac
elif [ x"$1" = x"--directory" ]; then
    shift

    if [ $# -gt 1 ]; then
        exit_failure_arg_count
    fi;

    case "$DE" in
        kde)
        directory_kde "$1"
        ;;

        gnome|xfce)
        directory_zenity "$1"
        ;;

        *)
        exit_failure_operation_impossible "Sorry, no method available for getting a directory"
        ;;
    esac
else
    exit_failure_arg_malformed "Unkown command" "$1"
fi
