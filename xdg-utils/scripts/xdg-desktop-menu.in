#!/bin/sh
#---------------------------------------------
#   xdg-desktop-menu
#
#   Utility script to install menu items on a Linux desktop.
#   Refer to the usage() function below for usage.
#
#   Copyright 2006, Kevin Krammer <kevin.krammer@gmx.at>
#   Copyright 2006, Jeremy White <jwhite@codeweavers.com>
#
#   LICENSE:
#
#---------------------------------------------

manualpage()
{
cat << _MANUALPAGE
_MANUALPAGE
}

usage()
{
cat << _USAGE
_USAGE
}

#@xdg-utils-common@

update_desktop_database()
{
#    echo Update desktop database: $mode
    if [ "$mode" = "system" ] ; then
        for x in `echo $PATH | sed 's/:/ /g'` /opt/gnome/bin; do
           if [ -x $x/update-desktop-database ] ; then
              DEBUG 1 "Running $x/update-desktop-database"
              eval '$x/update-desktop-database'$xdg_redirect_output
              return
           fi
        done
    fi
}

install_submenu()
{
    DEBUG 1 "install_submenu $1"
    menu_file="$1"

    # TODO: Extract filenames from existing .menu files
    # TODO: install, add $desktop_files, exclude duplicates
    # TODO: uninstall, exclude $desktop_files, delete if empty
    
    tmpfile=`mktemp`
    (
        echo '<!DOCTYPE Menu PUBLIC "-//freedesktop//DTD Menu 0.8//EN"'
        echo '    "http://www.freedesktop.org/standards/menu-spec/menu-0.8.dtd">'
        echo '<!-- Do not edit manually - generated and managed by @NAME@ -->'
        echo '<Menu>'
        echo '    <Name>Applications</Name>'

        for desktop_file in $directory_files; do
            basefile=`basename $desktop_file`
            basefilename=`echo "$basefile"|cut -d '.' -f 1`
            echo "<Menu>"
            echo "    <Name>$basefilename</Name>"
            echo "    <Directory>$basefile</Directory>"
        done

        echo "    <Include>"
        for desktop_file in $desktop_files; do
            basefile=`basename $desktop_file`
            echo "        <Filename>$basefile</Filename>"
        done
        echo "    </Include>"

        for desktop_file in $directory_files; do
            echo "</Menu>"
        done

        echo '</Menu>'                        
    ) > $tmpfile
    
    xdg_user_dir="$XDG_CONFIG_HOME"
    [ -n "$xdg_user_dir" ] || xdg_user_dir="$HOME/.config"
    xdg_user_dir="$xdg_user_dir/$xdg_dir_name"

    xdg_system_dirs="$XDG_CONFIG_DIRS"
    [ -n "$xdg_system_dirs" ] || xdg_system_dirs=/etc/xdg
    xdg_global_dir=
    for x in `echo $xdg_system_dirs | sed 's/:/ /g'` ; do
        if [ -w $x/$xdg_dir_name ] ; then
            xdg_global_dir="$x/$xdg_dir_name"
            break
        fi
    done
    xdg_user_dir="$xdg_user_dir/applications-merged"
    xdg_global_dir="$xdg_global_dir/applications-merged"

    DEBUG 3 "Install locations for *.menu file:" 
    DEBUG 3 "xdg_user_dir: $xdg_user_dir"
    DEBUG 3 "xdg_global_dir: $xdg_global_dir"
    DEBUG 3 "kde_user_dir: $kde_user_dir"
    DEBUG 3 "kde_global_dir: $kde_global_dir"
    DEBUG 3 "gnome_user_dir: $gnome_user_dir"
    DEBUG 3 "gnome_global_dir: $gnome_global_dir"

    if [ x"$mode" = x"user" ] ; then
        xdg_dir="$xdg_user_dir"
        kde_dir="$kde_user_dir"
        gnome_dir="$gnome_user_dir"
        my_umask=077
    else
        xdg_dir="$xdg_global_dir"
        kde_dir="$kde_global_dir"
        gnome_dir="$gnome_global_dir"
        my_umask=022
        if [ -z "${xdg_dir}${kde_dir}${gnome_dir}" ] ; then
            exit_failure_operation_impossible "No writable system menu directory found."
        fi
    fi

    DEBUG 1 "$action $menu_file in $xdg_dir $kde_dir $gnome_dir"

    case $action in
        install)
            save_umask=`umask`
            umask $my_umask

            for x in $xdg_dir $kde_dir $gnome_dir ; do
                mkdir -p $x
                eval 'cp $tmpfile $x/$menu_file'$xdg_redirect_output
            done

            umask $save_umask
            ;;

        uninstall)
            for x in $xdg_dir $kde_dir $gnome_dir ; do
                rm -f $x/$menu_file
            done

            ;;
    esac
}


[ x"$1" != x"" ] || exit_failure_syntax

mode=
action=
update=yes
desktop_files=
directory_files=

case $1 in
  install)
    action=install
    ;;

  uninstall)
    action=uninstall
    ;;

  forceupdate)
    action=forceupdate
    ;;

  *)
    exit_failure_syntax "unknown command '$1'"
    ;;
esac

shift

vendor=true
while [ $# -gt 0 ] ; do
    parm="$1"
    shift

    case "$parm" in
      --noupdate)
        update=no
        ;;

      --mode)
        if [ -z "$1" ] ; then
            exit_failure_syntax "mode argument missing for --mode"
        fi
        case "$1" in
          user)
            mode=user
            ;;

          system)
            mode=system
            ;;
            
          *)
            exit_failure_syntax "unknown mode '$1'"
            ;;
        esac
        shift
        ;;

      --novendor)
        vendor=false
        ;;

      -*)
        exit_failure_syntax "unexpected option '$parm'"
        ;;

      *)
        if [ "$action" = "install" ] ; then
            check_input_file "$parm"
        fi
        case "$parm" in
           *.directory)
              if [ -n "$desktop_files" ] ; then
                  exit_failure_syntax "'$parm' must preceed any *.desktop file"
              fi
              directory_files="$directory_files $parm"
              ;;
           *.desktop)
              desktop_files="$desktop_files $parm"
              ;;
           *)
              exit_failure_syntax "file to $action must be a *.directory or *.desktop file"
              ;;
        esac
        ;;
    esac
done

# Shouldn't happen
if [ -z "$action" ] ; then
    exit_failure_syntax "command argument missing"
fi

if [ -z "$mode" ] ; then
    if [ `whoami` = "root" ] ; then
       mode=system
    else
       mode=user
    fi
fi

if [ x"$action" = x"forceupdate" ] ; then
    update_desktop_database
    exit_success
fi

if [ -z "$desktop_files" ] ; then
    exit_failure_syntax "desktop-file argument missing"
fi

# Install *.directory files

xdg_dir_name=desktop-directories

xdg_user_dir="$XDG_DATA_HOME"
[ -n "$xdg_user_dir" ] || xdg_user_dir="$HOME/.local/share"
xdg_user_dir="$xdg_user_dir/$xdg_dir_name"

xdg_system_dirs="$XDG_DATA_DIRS"
[ -n "$xdg_system_dirs" ] || xdg_system_dirs=/usr/local/share/:/usr/share/
xdg_global_dir=
for x in `echo $xdg_system_dirs | sed 's/:/ /g'` ; do
    if [ -w $x/$xdg_dir_name ] ; then
        xdg_global_dir="$x/$xdg_dir_name"
        break
    fi
done

DEBUG 3 "Install locations for *.directory files:" 
DEBUG 3 "xdg_user_dir: $xdg_user_dir"
DEBUG 3 "xdg_global_dir: $xdg_global_dir"
DEBUG 3 "kde_user_dir: $kde_user_dir"
DEBUG 3 "kde_global_dir: $kde_global_dir"
DEBUG 3 "gnome_user_dir: $gnome_user_dir"
DEBUG 3 "gnome_global_dir: $gnome_global_dir"

if [ x"$mode" = x"user" ] ; then
    xdg_dir="$xdg_user_dir"
    kde_dir="$kde_user_dir"
    gnome_dir="$gnome_user_dir"
    my_umask=077
else
    xdg_dir="$xdg_global_dir"
    kde_dir="$kde_global_dir"
    gnome_dir="$gnome_global_dir"
    my_umask=022
    if [ -z "${xdg_dir}${kde_dir}${gnome_dir}" ] ; then
        exit_failure_operation_impossible "No writable system menu directory found."
    fi
fi

menu_name=
for desktop_file in $directory_files; do
    if [ "$vendor" =  "true" -a "$action" = "install" ] ; then
        check_vendor_prefix "$desktop_file"
    fi

    basefile=`basename $desktop_file`
    basefilename=`echo "$basefile"|cut -d '.' -f 1`
    if [ -z "$menu_name" ] ; then
        menu_name="$basefilename"
    else
        menu_name="$menu_name-$basefilename"
    fi
    DEBUG 1 "$action $desktop_file in $xdg_dir $kde_dir $gnome_dir"

    case $action in
        install)
            save_umask=`umask`
            umask $my_umask

            for x in $xdg_dir $kde_dir $gnome_dir ; do
                mkdir -p $x
                eval 'cp $desktop_file $x/$basefile'$xdg_redirect_output
            done

            umask $save_umask
            ;;

        uninstall)
            for x in $xdg_dir $kde_dir $gnome_dir ; do
                rm -f $x/$basefile
            done

            ;;
    esac
done

if [ -n "$menu_name" ] ; then
    if [ "$action" = "install" ] ; then
        install_submenu "$menu_name.menu"
    fi
fi

# Install *.desktop files
xdg_dir_name=applications

xdg_user_dir="$XDG_DATA_HOME"
[ -n "$xdg_user_dir" ] || xdg_user_dir="$HOME/.local/share"
xdg_user_dir="$xdg_user_dir/$xdg_dir_name"

xdg_system_dirs="$XDG_DATA_DIRS"
[ -n "$xdg_system_dirs" ] || xdg_system_dirs=/usr/local/share/:/usr/share/
xdg_global_dir=
for x in `echo $xdg_system_dirs | sed 's/:/ /g'` ; do
    if [ -w $x/$xdg_dir_name ] ; then
        xdg_global_dir="$x/$xdg_dir_name"
        break
    fi
done

kde_user_dir="$HOME/.kde/share/applnk"
kde_global_dir="/usr/share/applnk"
[ -w $kde_global_dir ] || kde_global_dir=

gnome_user_dir="$HOME/.gnome/apps"
gnome_global_dir="/usr/share/gnome/apps"
[ -w $gnome_global_dir ] || gnome_global_dir=

DEBUG 3 "Install locations for *.desktop files:" 
DEBUG 3 "xdg_user_dir: $xdg_user_dir"
DEBUG 3 "xdg_global_dir: $xdg_global_dir"
DEBUG 3 "kde_user_dir: $kde_user_dir"
DEBUG 3 "kde_global_dir: $kde_global_dir"
DEBUG 3 "gnome_user_dir: $gnome_user_dir"
DEBUG 3 "gnome_global_dir: $gnome_global_dir"

if [ x"$mode" = x"user" ] ; then
    xdg_dir="$xdg_user_dir"
    kde_dir="$kde_user_dir"
    gnome_dir="$gnome_user_dir"
    my_umask=077
else
    xdg_dir="$xdg_global_dir"
    kde_dir="$kde_global_dir"
    gnome_dir="$gnome_global_dir"
    my_umask=022
    if [ -z "${xdg_dir}${kde_dir}${gnome_dir}" ] ; then
        exit_failure_operation_impossible "No writable system menu directory found."
    fi
fi

for desktop_file in $desktop_files; do
    if [ "$vendor" =  "true" -a "$action" = "install" ] ; then
        check_vendor_prefix "$desktop_file"
    fi

    basefile=`basename $desktop_file`

    DEBUG 1 "$action $desktop_file in $xdg_dir $kde_dir $gnome_dir"

    case $action in
        install)
            save_umask=`umask`
            umask $my_umask

            for x in $xdg_dir $kde_dir $gnome_dir ; do
                mkdir -p $x
                eval 'cp $desktop_file $x/$basefile'$xdg_redirect_output
            done

            if [ -f $kde_dir/$basefile ] ; then
                echo "OnlyShowIn=Old;" >> $kde_dir/$basefile
            fi

            if [ -f $gnome_dir/$basefile ] ; then
                echo "OnlyShowIn=Old;" >> $gnome_dir/$basefile
            fi

            umask $save_umask
            ;;

        uninstall)
            for x in $xdg_dir $kde_dir $gnome_dir ; do
                rm -f $x/$basefile
            done

            ;;
    esac
done

if [ x"$update" = x"yes" ] ; then
    update_desktop_database
fi

exit_success
