#!/bin/sh
#---------------------------------------------
#   xdg-desktop-menu
#
#   Utility script to install menu items on a Linux desktop.
#   Refer to the usage() function below for usage.
#
#   Copyright 2006, Kevin Krammer <kevin.krammer@gmx.at>
#   Copyright 2006, Jeremy White <jwhite@codeweavers.com>
#
#   LICENSE:
#
#---------------------------------------------

manualpage()
{
cat << _MANUALPAGE
_MANUALPAGE
}

usage()
{
cat << _USAGE
_USAGE
}

#@xdg-utils-common@

update_desktop_database()
{
#    echo Update desktop database: $mode
    if [ "$mode" = "system" ] ; then
        for x in `echo $PATH | sed 's/:/ /g'` /opt/gnome/bin; do
           if [ -x $x/update-desktop-database ] ; then
              DEBUG 1 "Running $x/update-desktop-database"
              eval '$x/update-desktop-database'$xdg_redirect_output
              return
           fi
        done
    fi
}

[ x"$1" != x"" ] || exit_failure_syntax

mode=
action=
update=yes
desktop_file=

case $1 in
  install)
    action=install
    ;;

  uninstall)
    action=uninstall
    ;;

  forceupdate)
    action=forceupdate
    ;;

  *)
    exit_failure_syntax "unknown command '$1'"
    ;;
esac

shift



while [ $# -gt 0 ] ; do
    parm="$1"
    shift

    case "$parm" in
      --noupdate)
        update=no
        ;;

      --user)
        mode=user
        ;;

      --system)
        mode=system
        ;;

      --vendor)
        if [ -z "$1" ] ; then
            exit_failure_syntax "vendor-id argument missing for --vendor"
        fi
        vendor="$1"
        shift
        ;;

      -*)
        exit_failure_syntax "unexpected option '$parm'"
        ;;

      *)
        if [ -n "$desktop_file" ] ; then
            exit_failure_syntax "unexpected argument '$parm'"
        fi
        if [ "$action" = "install" ] ; then
            if [ ! -f "$parm" ] ; then
                exit_failure_file_missing "file '$parm' does not exist"
            fi
        fi
        desktop_file="$parm"
        ;;
    esac
done

# Shouldn't happen
if [ -z "$action" ] ; then
    exit_failure_syntax "command argument missing"
fi

if [ -z "$mode" ] ; then
    exit_failure_syntax "expected --user or --system option"
fi

if [ x"$action" = x"forceupdate" ] ; then
    update_desktop_database
    exit_success
fi

if [ -z "$desktop_file" ] ; then
    exit_failure_syntax "file argument missing"
fi

filetype=
xdg_dir_name=
case $desktop_file in
  *.desktop)
     filetype=desktop
     xdg_dir_name=applications
     ;;
  *.directory)
     fileype=directory
     xdg_dir_name=desktop-directories
     ;;
  *.menu)
     filetype=menu
     xdg_dir_name=menus/applications-merged
     ;;
  *)
     exit_failure_syntax "file to $action must be a *.desktop, *.directory or *.menu file"
     ;;
esac

if [ x"$filetype" = x"menu" ] ; then
    xdg_user_dir="$XDG_CONFIG_HOME"
    [ -n "$xdg_user_dir" ] || xdg_user_dir="$HOME/.config"
    xdg_user_dir="$xdg_user_dir/$xdg_dir_name"

    xdg_system_dirs="$XDG_CONFIG_DIRS"
    [ -n "$xdg_system_dirs" ] || xdg_system_dirs=/etc/xdg
    for x in `echo $xdg_system_dirs | sed 's/:/ /g'` ; do
        if [ -w $x/$xdg_dir_name ] ; then
            xdg_global_dir="$x/$xdg_dir_name"
            break
        fi
    done
    [ -w $xdg_global_dir ] || xdg_global_dir=
else
    xdg_user_dir="$XDG_DATA_HOME"
    [ -n "$xdg_user_dir" ] || xdg_user_dir="$HOME/.local/share"
    xdg_user_dir="$xdg_user_dir/$xdg_dir_name"

    xdg_system_dirs="$XDG_DATA_DIRS"
    [ -n "$xdg_system_dirs" ] || xdg_system_dirs=/usr/local/share/:/usr/share/
    for x in `echo $xdg_system_dirs | sed 's/:/ /g'` ; do
        if [ -w $x/$xdg_dir_name ] ; then
            xdg_global_dir="$x/$xdg_dir_name"
            break
        fi
    done
    [ -w $xdg_global_dir ] || xdg_global_dir=

    if [ x"$filetype" = x"desktop" ] ; then
        kde_user_dir="$HOME/.kde/share/applnk"
        kde_global_dir="/usr/share/applnk"
        [ -w $kde_global_dir ] || kde_global_dir=

        gnome_user_dir="$HOME/.gnome/apps"
        gnome_global_dir="/usr/share/gnome/apps"
        [ -w $gnome_global_dir ] || gnome_global_dir=
    fi
fi

DEBUG 3 "xdg_user_dir: $xdg_user_dir"
DEBUG 3 "xdg_global_dir: $xdg_global_dir"
DEBUG 3 "kde_user_dir: $kde_user_dir"
DEBUG 3 "kde_global_dir: $kde_global_dir"
DEBUG 3 "gnome_user_dir: $gnome_user_dir"
DEBUG 3 "gnome_global_dir: $gnome_global_dir"

if [ x"$mode" = x"user" ] ; then
    xdg_dir="$xdg_user_dir"
    kde_dir="$kde_user_dir"
    gnome_dir="$gnome_user_dir"
    my_umask=077
else
    xdg_dir="$xdg_global_dir"
    kde_dir="$kde_global_dir"
    gnome_dir="$gnome_global_dir"
    my_umask=022
    if [ -z "${xdg_dir}${kde_dir}${gnome_dir}" ] ; then
        [ `whoami` = "root" ] || rootmsg="Try as root or use --user."
        exit_failure_operation_impossible "No writable system menu directory found. $rootmsg"
    fi
fi


# echo "[xdg|$xdg_user_dir|$xdg_global_dir]"
# echo "[kde|$kde_user_dir|$kde_global_dir]"
# echo "[gnome|$gnome_user_dir|$gnome_global_dir]"

# echo "[using|$xdg_dir|$kde_dir|$gnome_dir]"

basefile=`basename $desktop_file`
[ -z $vendor ] || basefile="$vendor-$basefile"

DEBUG 1 "$action $desktop_file in $xdg_dir $kde_dir $gnome_dir"

case $action in
    install)
        save_umask=`umask`
        umask $my_umask

        for x in $xdg_dir $kde_dir $gnome_dir ; do
            mkdir -p $x
            eval 'cp $desktop_file $x/$basefile'$xdg_redirect_output
        done

        if [ -f $kde_dir/$basefile ] ; then
            echo "OnlyShowIn=Old;" >> $kde_dir/$basefile
        fi

        if [ -f $gnome_dir/$basefile ] ; then
            echo "OnlyShowIn=Old;" >> $gnome_dir/$basefile
        fi

        umask $save_umask
        ;;

    uninstall)
        for x in $xdg_dir $kde_dir $gnome_dir ; do
            rm -f $x/$basefile
        done

        ;;
esac

if [ x"$update" = x"yes" ] ; then
    update_desktop_database
fi

exit_success


